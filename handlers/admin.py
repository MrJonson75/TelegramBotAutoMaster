from datetime import datetime
import pytz
from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import ADMIN_ID
from database import Session, User, Auto, Booking, BookingStatus
from keyboards.main_kb import Keyboards
from utils import setup_logger
from handlers.service_utils import send_booking_notification

logger = setup_logger(__name__)
admin_router = Router()

class AdminStates(StatesGroup):
    AwaitingRejectionReason = State()
    AwaitingNewTimeDate = State()
    AwaitingNewTimeSlot = State()

@admin_router.message(Command("admin"))
@admin_router.callback_query(F.data.startswith("admin_page_"))
async def cmd_admin(message_or_callback: Message | CallbackQuery, bot: Bot = None):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    is_callback = isinstance(message_or_callback, CallbackQuery)
    message = message_or_callback.message if is_callback else message_or_callback
    logger.debug(f"Admin access attempt by user {message_or_callback.from_user.id}, expected ADMIN_ID: {ADMIN_ID}")
    if str(message_or_callback.from_user.id) != ADMIN_ID:
        await message.answer("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞.")
        if is_callback:
            await message_or_callback.answer()
        return
    page = 0
    if is_callback and message_or_callback.data.startswith("admin_page_"):
        page = int(message_or_callback.data.replace("admin_page_", ""))
        if page < 0:
            page = 0
    try:
        with Session() as session:
            tz = pytz.timezone('Asia/Dubai')
            now = datetime.now(tz)
            bookings_query = session.query(Booking).filter(
                Booking.status.in_([BookingStatus.PENDING, BookingStatus.CONFIRMED]),
                (Booking.date > now.date()) | (
                    (Booking.date == now.date()) & (Booking.time >= now.time())
                )
            ).order_by(Booking.date, Booking.time)
            total_bookings = bookings_query.count()
            bookings = bookings_query.limit(5).offset(page * 5).all()
            logger.debug(f"Rendering admin page {page} with {len(bookings)} bookings")
            if not bookings:
                await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.", reply_markup=Keyboards.main_menu_kb())
                if is_callback:
                    await message_or_callback.answer()
                return
            if page == 0 and not is_callback:
                await message.answer(f"üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}):", reply_markup=Keyboards.main_menu_kb())
            for booking in bookings:
                user = session.query(User).get(booking.user_id)
                auto = session.query(Auto).get(booking.auto_id)
                status = {
                    BookingStatus.PENDING: "‚è≥ –û–∂–∏–¥–∞–µ—Ç",
                    BookingStatus.CONFIRMED: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ"
                }[booking.status]
                description = f"\n–û–ø–∏—Å–∞–Ω–∏–µ: {booking.description}" if booking.description else ""
                response = (
                    f"–ó–∞—è–≤–∫–∞ #{booking.id}: {booking.service_name} ({booking.price or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'} ‚ÇΩ)\n"
                    f"–ö–ª–∏–µ–Ω—Ç: {user.first_name} {user.last_name}\n"
                    f"–ê–≤—Ç–æ: {auto.brand} {auto.license_plate}\n"
                    f"–î–∞—Ç–∞: {booking.date.strftime('%d.%m.%Y')}\n"
                    f"–í—Ä–µ–º—è: {booking.time.strftime('%H:%M')}\n"
                    f"–°—Ç–∞—Ç—É—Å: {status}{description}"
                )
                keyboard_rows = []
                if booking.status == BookingStatus.PENDING:
                    keyboard_rows.append([
                        InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_booking_{booking.id}"),
                        InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_booking_{booking.id}"),
                        InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data=f"reschedule_booking_{booking.id}")
                    ])
                keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
                if len(response) > 1024:
                    logger.warning(f"–ü–æ–¥–ø–∏—Å—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è ({len(response)} —Å–∏–º–≤–æ–ª–æ–≤)")
                    await message.answer(response, reply_markup=keyboard)
                    continue
                logger.debug(f"Rendering booking {booking.id} on page {page}")
                await message.answer(response, reply_markup=keyboard)
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            navigation_keyboard = Keyboards.admin_pagination_kb(page, total_bookings)
            if navigation_keyboard:
                await message.answer(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {((total_bookings - 1) // 5) + 1}", reply_markup=navigation_keyboard)
            if is_callback:
                await message_or_callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {str(e)}")
        await message.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=Keyboards.main_menu_kb())
        if is_callback:
            await message_or_callback.answer()

@admin_router.callback_query(F.data.startswith("confirm_booking_"))
async def confirm_booking(callback: CallbackQuery, bot: Bot):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞—è–≤–∫—É –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if str(callback.from_user.id) != ADMIN_ID:
        await callback.message.answer("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞.")
        await callback.answer()
        return
    try:
        booking_id = int(callback.data.replace("confirm_booking_", ""))
        with Session() as session:
            booking = session.query(Booking).get(booking_id)
            if not booking:
                await callback.message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=Keyboards.main_menu_kb())
                await callback.answer()
                return
            if booking.status != BookingStatus.PENDING:
                await callback.message.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.", reply_markup=Keyboards.main_menu_kb())
                await callback.answer()
                return
            booking.status = BookingStatus.CONFIRMED
            session.commit()
            logger.info(f"Booking {booking_id} confirmed by admin {callback.from_user.id}")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            user = session.query(User).get(booking.user_id)
            auto = session.query(Auto).get(booking.auto_id)
            message_text = (
                f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{booking.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n"
                f"–£—Å–ª—É–≥–∞: {booking.service_name}\n"
                f"–ê–≤—Ç–æ: {auto.brand} {auto.license_plate}\n"
                f"–î–∞—Ç–∞: {booking.date.strftime('%d.%m.%Y')}\n"
                f"–í—Ä–µ–º—è: {booking.time.strftime('%H:%M')}"
            )
            logger.debug(f"Sending confirmation to user {user.telegram_id} for booking {booking_id}")
            await bot.send_message(user.telegram_id, message_text)
            await callback.message.answer(f"–ó–∞—è–≤–∫–∞ #{booking_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.", reply_markup=Keyboards.main_menu_kb())
            await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ {booking_id}: {str(e)}")
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=Keyboards.main_menu_kb())
        await callback.answer()

@admin_router.callback_query(F.data.startswith("reject_booking_"))
async def reject_booking(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏."""
    if str(callback.from_user.id) != ADMIN_ID:
        await callback.message.answer("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞.")
        await callback.answer()
        return
    try:
        booking_id = int(callback.data.replace("reject_booking_", ""))
        with Session() as session:
            booking = session.query(Booking).get(booking_id)
            if not booking:
                await callback.message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=Keyboards.main_menu_kb())
                await callback.answer()
                return
            if booking.status != BookingStatus.PENDING:
                await callback.message.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.", reply_markup=Keyboards.main_menu_kb())
                await callback.answer()
                return
            await state.update_data(booking_id=booking_id)
            await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:")
            await state.set_state(AdminStates.AwaitingRejectionReason)
            logger.debug(f"Starting rejection for booking {booking_id}")
            await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {str(e)}")
        await callback.message.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=Keyboards.main_menu_kb())
        await callback.answer()

@admin_router.message(AdminStates.AwaitingRejectionReason, F.text)
async def process_rejection_reason(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    reason = message.text.strip()
    if len(reason) > 500:
        await message.answer("–ü—Ä–∏—á–∏–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    try:
        data = await state.get_data()
        booking_id = data.get("booking_id")
        with Session() as session:
            booking = session.query(Booking).get(booking_id)
            if not booking:
                await message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=Keyboards.main_menu_kb())
                await state.clear()
                return
            booking.status = BookingStatus.REJECTED
            booking.rejection_reason = reason
            session.commit()
            logger.info(f"Booking {booking_id} rejected by admin {message.from_user.id} with reason: {reason}")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            user = session.query(User).get(booking.user_id)
            auto = session.query(Auto).get(booking.auto_id)
            success = await send_booking_notification(
                bot, user.telegram_id, booking, user, auto,
                f"–í–∞—à–∞ –∑–∞–ø–∏—Å—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. ‚ùå\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason} üìù"
            )
            if not success:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user_id={user.telegram_id} –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ booking_id={booking_id}")
            await message.answer(f"–ó–∞—è–≤–∫–∞ #{booking_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.", reply_markup=Keyboards.main_menu_kb())
            await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ {booking_id}: {str(e)}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=Keyboards.main_menu_kb())
        await state.clear()

@admin_router.callback_query(F.data.startswith("reschedule_booking_"))
async def reschedule_booking(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—É—é –¥–∞—Ç—É –¥–ª—è –∑–∞—è–≤–∫–∏."""
    if str(callback.from_user.id) != ADMIN_ID:
        await callback.message.answer("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞.")
        await callback.answer()
        return
    try:
        booking_id = int(callback.data.replace("reschedule_booking_", ""))
        with Session() as session:
            booking = session.query(Booking).get(booking_id)
            if not booking:
                await callback.message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=Keyboards.main_menu_kb())
                await callback.answer()
                return
            if booking.status != BookingStatus.PENDING:
                await callback.message.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.", reply_markup=Keyboards.main_menu_kb())
                await callback.answer()
                return
            await state.update_data(booking_id=booking_id)
            await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –¥–ª—è –∑–∞—è–≤–∫–∏:", reply_markup=Keyboards.calendar_kb())
            await state.set_state(AdminStates.AwaitingNewTimeDate)
            logger.debug(f"Starting reschedule for booking {booking_id}")
            await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞—è–≤–∫–∏ {booking_id}: {str(e)}")
        await callback.message.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=Keyboards.main_menu_kb())
        await callback.answer()

@admin_router.callback_query(AdminStates.AwaitingNewTimeDate, F.data.startswith("date_"))
async def process_new_date_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–æ–≤–æ–π –¥–∞—Ç—ã."""
    date_str = callback.data.replace("date_", "")
    try:
        selected_date = datetime.strptime(date_str, "%Y-%m-%d")
        await state.update_data(selected_date=selected_date)
        with Session() as session:
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞—è–≤–∫–∏:",
                reply_markup=Keyboards.time_slots_kb(selected_date, 60, session)
            )
            await state.set_state(AdminStates.AwaitingNewTimeSlot)
            await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π –¥–∞—Ç—ã: {str(e)}")
        await callback.message.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=Keyboards.main_menu_kb())
        await state.clear()
        await callback.answer()

@admin_router.callback_query(AdminStates.AwaitingNewTimeSlot, F.data.startswith("time_"))
async def process_new_time_selection(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    time_str = callback.data.replace("time_", "")
    try:
        selected_time = datetime.strptime(time_str, "%H:%M").time()
        data = await state.get_data()
        booking_id = data.get("booking_id")
        selected_date = data.get("selected_date")
        with Session() as session:
            booking = session.query(Booking).get(booking_id)
            if not booking:
                await callback.message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=Keyboards.main_menu_kb())
                await state.clear()
                await callback.answer()
                return
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Ä–µ–º—è –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
            now = datetime.now(pytz.timezone('Asia/Dubai'))
            if selected_date.date() < now.date() or (selected_date.date() == now.date() and selected_time < now.time()):
                await callback.message.answer("–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=Keyboards.main_menu_kb())
                await state.clear()
                await callback.answer()
                return
            booking.date = selected_date.date()
            booking.time = selected_time
            booking.status = BookingStatus.PENDING
            session.commit()
            logger.info(f"Booking {booking_id} rescheduled by admin {callback.from_user.id} to {selected_date.date()} {selected_time}")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            user = session.query(User).get(booking.user_id)
            auto = session.query(Auto).get(booking.auto_id)
            success = await send_booking_notification(
                bot, user.telegram_id, booking, user, auto,
                f"üìÖ –í—Ä–µ–º—è –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ #{booking.id} –∏–∑–º–µ–Ω–µ–Ω–æ.\n"
                f"–ù–æ–≤–∞—è –¥–∞—Ç–∞: {booking.date.strftime('%d.%m.%Y')}\n"
                f"–ù–æ–≤–æ–µ –≤—Ä–µ–º—è: {booking.time.strftime('%H:%M')}\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è.",
                reply_markup=Keyboards.confirm_reschedule_kb(booking_id)
            )
            if not success:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user_id={user.telegram_id} –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø–∏—Å–∏ booking_id={booking_id}")
            await callback.message.answer(
                f"–í—Ä–µ–º—è –∑–∞—è–≤–∫–∏ #{booking_id} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {booking.date.strftime('%d.%m.%Y')} {booking.time.strftime('%H:%M')}.",
                reply_markup=Keyboards.main_menu_kb()
            )
            await state.clear()
            await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞—è–≤–∫–∏ {booking_id}: {str(e)}")
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=Keyboards.main_menu_kb())
        await state.clear()
        await callback.answer()