from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, FSInputFile
from config import get_photo_path, MESSAGES
from keyboards.main_kb import Keyboards
from utils import setup_logger

logger = setup_logger(__name__)
common_router = Router()

@common_router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    try:
        photo_path = get_photo_path("welcome")
        await message.answer_photo(
            photo=FSInputFile(photo_path),
            caption=MESSAGES["welcome"],
            reply_markup=Keyboards.main_menu_kb()
        )
    except (FileNotFoundError, ValueError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è /start: {str(e)}")
        await message.answer(
            MESSAGES["welcome"],
            reply_markup=Keyboards.main_menu_kb()
        )

@common_router.message(F.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã/–∫–∞–∫ –ø—Ä–æ–µ—Ö–∞—Ç—å")
async def show_contacts(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã/–∫–∞–∫ –ø—Ä–æ–µ—Ö–∞—Ç—å'."""
    try:
        photo_path = get_photo_path("contacts")
        await message.answer_photo(
            photo=FSInputFile(photo_path),
            caption=MESSAGES["contacts"],
            reply_markup=Keyboards.main_menu_kb()
        )
    except (FileNotFoundError, ValueError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {str(e)}")
        await message.answer(
            MESSAGES["contacts"],
            reply_markup=Keyboards.main_menu_kb()
        )

@common_router.message(F.text == "–û –º–∞—Å—Ç–µ—Ä–µ")
async def cmd_about_master(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è '–û –º–∞—Å—Ç–µ—Ä–µ'."""
    try:
        photo_path = get_photo_path("about_master")
        await message.answer_photo(photo=FSInputFile(photo_path))
        await message.answer(MESSAGES["about_master"], reply_markup=Keyboards.main_menu_kb())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Å—Ç–µ—Ä–µ: {str(e)}")
        await message.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=Keyboards.main_menu_kb())

@common_router.message(F.text == "–ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ —Ñ–æ—Ç–æ")
async def cmd_diagnostic(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è '–ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ —Ñ–æ—Ç–æ'."""
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:",
        reply_markup=Keyboards.diagnostic_choice_kb()
    )