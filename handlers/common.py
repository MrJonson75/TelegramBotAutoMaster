from datetime import datetime

import pytz
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, FSInputFile
from sqlalchemy.orm import Session

from keyboards.main_kb import Keyboards  # –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç
from config import Config
from utils import setup_logger

from database import Booking, BookingStatus, User, Auto, Session

logger = setup_logger(__name__)

common_router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@common_router.message(Command("start"))
async def cmd_start(message: Message):
    try:
        photo_path = Config.get_photo_path("welcome")
        await message.answer_photo(
            photo=FSInputFile(photo_path),
            caption=Config.MESSAGES["welcome"],
            reply_markup=Keyboards.main_menu_kb()  # –û–±–Ω–æ–≤–ª–µ–Ω–æ
        )
    except (FileNotFoundError, ValueError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è /start: {str(e)}")
        await message.answer(
            Config.MESSAGES["welcome"],
            reply_markup=Keyboards.main_menu_kb()  # –û–±–Ω–æ–≤–ª–µ–Ω–æ
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã/–∫–∞–∫ –ø—Ä–æ–µ—Ö–∞—Ç—å"
@common_router.message(F.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã/–∫–∞–∫ –ø—Ä–æ–µ—Ö–∞—Ç—å")
async def show_contacts(message: Message):
    try:
        photo_path = Config.get_photo_path("contacts")
        await message.answer_photo(
            photo=FSInputFile(photo_path),
            caption=Config.MESSAGES["contacts"],
            reply_markup=Keyboards.main_menu_kb()  # –û–±–Ω–æ–≤–ª–µ–Ω–æ
        )
    except (FileNotFoundError, ValueError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {str(e)}")
        await message.answer(
            Config.MESSAGES["contacts"],
            reply_markup=Keyboards.main_menu_kb()  # –û–±–Ω–æ–≤–ª–µ–Ω–æ
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è "–û –º–∞—Å—Ç–µ—Ä–µ"
@common_router.message(F.text == "–û –º–∞—Å—Ç–µ—Ä–µ")
async def show_about_master(message: Message):
    try:
        photo_path = Config.get_photo_path("about_master")
        await message.answer_photo(
            photo=FSInputFile(photo_path),
            caption=Config.MESSAGES["about_master"],
            reply_markup=Keyboards.main_menu_kb()  # –û–±–Ω–æ–≤–ª–µ–Ω–æ
        )
    except (FileNotFoundError, ValueError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è '–û –º–∞—Å—Ç–µ—Ä–µ': {str(e)}")
        await message.answer(
            Config.MESSAGES["about_master"],
            reply_markup=Keyboards.main_menu_kb()  # –û–±–Ω–æ–≤–ª–µ–Ω–æ
        )

@common_router.message(Command("admin"))
async def cmd_admin(message: Message):
    if str(message.from_user.id) != Config.ADMIN_ID:
        await message.answer("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞.")
        return
    try:
        with Session() as session:  # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Å–µ—Å—Å–∏–∏
            tz = pytz.timezone('Asia/Dubai')
            now = datetime.now(tz)
            bookings = session.query(Booking).filter(
                Booking.status.in_([BookingStatus.PENDING, BookingStatus.CONFIRMED]),
                (Booking.date > now.date()) | (
                    (Booking.date == now.date()) & (Booking.time >= now.time())
                )
            ).order_by(Booking.date, Booking.time).all()
            if not bookings:
                await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.", reply_markup=Keyboards.main_menu_kb())
                return
            response = "–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏:\n\n"
            for booking in bookings:
                user = session.query(User).get(booking.user_id)
                auto = session.query(Auto).get(booking.auto_id)
                status = {
                    BookingStatus.PENDING: "–û–∂–∏–¥–∞–µ—Ç",
                    BookingStatus.CONFIRMED: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ"
                }[booking.status]
                response += (
                    f"–ó–∞—è–≤–∫–∞ #{booking.id}: {booking.service_name} ({booking.price} ‚ÇΩ), "
                    f"{user.first_name} {user.last_name}, {auto.brand} {auto.license_plate}, "
                    f"{booking.date.strftime('%d.%m.%Y')} {booking.time.strftime('%H:%M')}, {status}\n"
                )
            if len(response) > 1024:
                await message.answer(response, reply_markup=Keyboards.main_menu_kb())
                return
            try:
                photo_path = Config.get_photo_path("booking")
                await message.answer_photo(
                    photo=FSInputFile(photo_path),
                    caption=response,
                    reply_markup=Keyboards.main_menu_kb()
                )
            except (FileNotFoundError, ValueError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {str(e)}")
                await message.answer(response, reply_markup=Keyboards.main_menu_kb())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {str(e)}")
        await message.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=Keyboards.main_menu_kb())