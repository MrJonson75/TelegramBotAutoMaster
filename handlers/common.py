from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from config import get_photo_path, MESSAGES
from keyboards.main_kb import Keyboards
from utils import setup_logger, delete_previous_message
from typing import Optional

logger = setup_logger(__name__)
common_router = Router()


async def send_message_with_cleanup(
        message: Message,
        text: str,
        photo_path: Optional[str] = None,
        reply_markup: Optional[InlineKeyboardMarkup] = None
) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        await delete_previous_message(message)

        if photo_path:
            sent_message = await message.answer_photo(
                photo=FSInputFile(photo_path),
                caption=text,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
        else:
            sent_message = await message.answer(
                text,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text[:50]}...")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        await message.answer(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode="HTML",
            reply_markup=Keyboards.main_menu_kb()
        )
        return False


@common_router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É /start")
    back_button = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é ‚¨Ö", callback_data="back_to_main")
    ]])
    await send_message_with_cleanup(
        message,
        f"<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n{MESSAGES['welcome']} üöó",
        photo_path=get_photo_path("welcome"),
        reply_markup=back_button
    )


@common_router.message(F.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã/–∫–∞–∫ –ø—Ä–æ–µ—Ö–∞—Ç—å")
async def show_contacts(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã/–∫–∞–∫ –ø—Ä–æ–µ—Ö–∞—Ç—å'."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç—ã")
    back_button = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é ‚¨Ö", callback_data="back_to_main")
    ]])
    await send_message_with_cleanup(
        message,
        f"<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã –∏ –ø—Ä–æ–µ–∑–¥</b>\n{MESSAGES['contacts']} üìç",
        photo_path=get_photo_path("contacts"),
        reply_markup=back_button
    )


@common_router.message(F.text == "–û –º–∞—Å—Ç–µ—Ä–µ")
async def cmd_about_master(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è '–û –º–∞—Å—Ç–µ—Ä–µ'."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–µ")
    back_button = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é ‚¨Ö", callback_data="back_to_main")
    ]])
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
    if await send_message_with_cleanup(
            message,
            None,  # –ë–µ–∑ —Ç–µ–∫—Å—Ç–∞, —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ
            photo_path=get_photo_path("about_master")
    ):
        # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        await send_message_with_cleanup(
            message,
            f"<b>–û –º–∞—Å—Ç–µ—Ä–µ</b>\n{MESSAGES['about_master']} üîß",
            reply_markup=back_button
        )