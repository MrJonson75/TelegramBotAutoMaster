from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from database import Session, Review
from config import get_photo_path, MESSAGES
from utils.service_utils import send_message, get_progress_bar
from keyboards.main_kb import Keyboards
from utils import setup_logger

logger = setup_logger(__name__)
master_info_router = Router()

# –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è UX
MASTER_PROGRESS_STEPS = {
    "about": 1,
    "reviews": 2,
    "works": 3
}

def get_master_menu_kb() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é '–û –º–∞—Å—Ç–µ—Ä–µ'."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìú –ù–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ", callback_data="master_about"),
            InlineKeyboardButton(text="‚≠ê –õ–µ–Ω—Ç–∞ –æ—Ç–∑—ã–≤–æ–≤", callback_data="master_reviews"),
        ],
        [
            InlineKeyboardButton(text="üõ†Ô∏è –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç", callback_data="master_works"),
        ],
        [
            InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main"),
        ]
    ])

@master_info_router.callback_query(F.data == "master_menu")
async def show_master_menu(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é '–û –º–∞—Å—Ç–µ—Ä–µ' —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π."""
    try:
        response = (
            f"<b>–û –º–∞—Å—Ç–µ—Ä–µ üöó</b>\n"
            f"–£–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ –º–∞—Å—Ç–µ—Ä–µ –∏ –µ–≥–æ —Ä–∞–±–æ—Ç–µ!\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
        )
        sent_message = await send_message(
            bot, str(callback.message.chat.id), "photo",
            response,
            photo=get_photo_path("about_master"),
            reply_markup=get_master_menu_kb()
        )
        if sent_message:
            await state.update_data(last_message_id=sent_message.message_id)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é –º–∞—Å—Ç–µ—Ä–∞: {str(e)}")
        await callback.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@master_info_router.callback_query(F.data == "master_about")
async def show_master_about(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é '–ù–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ'."""
    try:
        response = (
            f"{await get_progress_bar('about', MASTER_PROGRESS_STEPS, style='emoji')}\n"
            f"<b>üìú –ù–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ</b>\n"
            f"{MESSAGES['about_master']}\n"
            f"üòé –ö–∞—á–µ—Å—Ç–≤–æ –∏ –∑–∞–±–æ—Ç–∞ –æ –≤–∞—à–µ–º –∞–≤—Ç–æ!"
        )
        sent_message = await send_message(
            bot, str(callback.message.chat.id), "photo",
            response,
            photo=get_photo_path("about_master"),
            reply_markup=get_master_menu_kb()
        )
        if sent_message:
            await state.update_data(last_message_id=sent_message.message_id)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ '–ù–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ': {str(e)}")
        await callback.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@master_info_router.callback_query(F.data == "master_reviews")
async def show_master_reviews(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–µ–Ω—Ç—É –æ—Ç–∑—ã–≤–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5)."""
    try:
        with Session() as session:
            reviews = session.query(Review).order_by(Review.created_at.desc()).limit(5).all()
            response = (
                f"{await get_progress_bar('reviews', MASTER_PROGRESS_STEPS, style='emoji')}\n"
                f"<b>‚≠ê –õ–µ–Ω—Ç–∞ –æ—Ç–∑—ã–≤–æ–≤</b>\n"
            )
            if not reviews:
                response += "üò¢ –ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!"
            else:
                for review in reviews:
                    rating = review.rating if hasattr(review, 'rating') and review.rating else "–ë–µ–∑ —Ä–µ–π—Ç–∏–Ω–≥–∞"
                    response += (
                        f"üìÖ {review.created_at.strftime('%d.%m.%Y')}\n"
                        f"‚≠ê {rating}\n"
                        f"{review.text[:50]}{'?' if len(review.text) > 50 else ''}\n"
                        f"{'üì∏ –° —Ñ–æ—Ç–æ' if review.photo1 else ''}\n\n"
                    )

        sent_message = await send_message(
            bot, str(callback.message.chat.id), "photo",
            response,
            photo=get_photo_path("reviews"),
            reply_markup=get_master_menu_kb()
        )
        if sent_message:
            await state.update_data(last_message_id=sent_message.message_id)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –æ—Ç–∑—ã–≤–æ–≤: {str(e)}")
        await callback.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@master_info_router.callback_query(F.data == "master_works")
async def show_master_works(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç."""
    try:
        response = (
            f"{await get_progress_bar('works', MASTER_PROGRESS_STEPS, style='emoji')}\n"
            f"<b>üõ†Ô∏è –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç</b>\n"
            f"–ß—Ç–æ –º—ã —É–º–µ–µ–º:\n"
            f"üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ —Ä–µ–º–æ–Ω—Ç –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π\n"
            f"üöó –ü–æ–ª–Ω–æ–µ –¢–û –∏ –∑–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞\n"
            f"‚öôÔ∏è –†–µ–º–æ–Ω—Ç —Ö–æ–¥–æ–≤–æ–π –∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏\n"
            f"üì∏ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –Ω–∞—à–∏—Ö —Ä–∞–±–æ—Ç!"
        )
        sent_message = await send_message(
            bot, str(callback.message.chat.id), "photo",
            response,
            photo=get_photo_path("works"),
            reply_markup=get_master_menu_kb()
        )
        if sent_message:
            await state.update_data(last_message_id=sent_message.message_id)
        await callback.answer()
    except Exception as e:
        logger.error(f"Error showing master works: {str(e)}")
        await callback.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")