from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from database import Session, Review
from config import get_photo_path, MESSAGES
from utils.service_utils import send_message, get_progress_bar
from utils import setup_logger
from datetime import datetime
import pytz

logger = setup_logger(__name__)
master_info_router = Router()

MASTER_PROGRESS_STEPS = {
    "about": 1,
    "reviews": 2,
    "works": 3
}

def get_master_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìú –ù–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ", callback_data="master_about"),
            InlineKeyboardButton(text="‚≠ê –õ–µ–Ω—Ç–∞ –æ—Ç–∑—ã–≤–æ–≤", callback_data="master_reviews"),
        ],
        [
            InlineKeyboardButton(text="üõ†Ô∏è –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç", callback_data="master_works"),
        ],
        [
            InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main"),
        ]
    ])

@master_info_router.callback_query(F.data == "master_menu")
async def show_master_menu(callback: CallbackQuery, state: FSMContext, bot: Bot):
    try:
        response = (
            f"<b>–û –º–∞—Å—Ç–µ—Ä–µ üöó</b>\n"
            f"–£–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ –º–∞—Å—Ç–µ—Ä–µ –∏ –µ–≥–æ —Ä–∞–±–æ—Ç–µ!\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
        )
        sent_message = await send_message(
            bot, str(callback.message.chat.id), "photo",
            response,
            photo=get_photo_path("about_master"),
            reply_markup=get_master_menu_kb()
        )
        if sent_message:
            await state.update_data(last_message_id=sent_message.message_id)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é –º–∞—Å—Ç–µ—Ä–∞: {str(e)}")
        await callback.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@master_info_router.callback_query(F.data == "master_about")
async def show_master_about(callback: CallbackQuery, state: FSMContext, bot: Bot):
    try:
        response = (
            f"{await get_progress_bar('about', MASTER_PROGRESS_STEPS, style='emoji')}\n"
            f"<b>üìú –ù–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ</b>\n"
            f"{MESSAGES['about_master']}\n"
            f"üòé –ö–∞—á–µ—Å—Ç–≤–æ –∏ –∑–∞–±–æ—Ç–∞ –æ –≤–∞—à–µ–º –∞–≤—Ç–æ!"
        )
        sent_message = await send_message(
            bot, str(callback.message.chat.id), "photo",
            response,
            photo=get_photo_path("about_master"),
            reply_markup=get_master_menu_kb()
        )
        if sent_message:
            await state.update_data(last_message_id=sent_message.message_id)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ '–ù–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ': {str(e)}")
        await callback.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@master_info_router.callback_query(F.data == "master_reviews")
async def show_master_reviews(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await show_reviews_page(callback, state, bot, page=0)

@master_info_router.callback_query(F.data.startswith("reviews_page_"))
async def show_reviews_page(callback: CallbackQuery, state: FSMContext, bot: Bot, page: int = 0):
    try:
        with Session() as session:
            reviews = session.query(Review).order_by(Review.created_at.desc()).all()
            reviews_per_page = 5
            start_idx = page * reviews_per_page
            end_idx = min(start_idx + reviews_per_page, len(reviews))
            msk = pytz.timezone("Europe/Moscow")
            response = (
                f"{await get_progress_bar('reviews', MASTER_PROGRESS_STEPS, style='emoji')}\n"
                f"<b>‚≠ê –õ–µ–Ω—Ç–∞ –æ—Ç–∑—ã–≤–æ–≤</b>\n"
            )
            if not reviews:
                response += "üò¢ –ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!"
            else:
                for review in reviews[start_idx:end_idx]:
                    rating = f"{'‚≠ê' * review.rating}" if review.rating else "–ë–µ–∑ —Ä–µ–π—Ç–∏–Ω–≥–∞"
                    has_media = review.photo1 or review.video
                    response += (
                        f"üìÖ {review.created_at.astimezone(msk).strftime('%d.%m.%Y')}\n"
                        f"‚≠ê {rating}\n"
                        f"{review.text[:50]}{'...' if len(review.text) > 50 else ''}\n"
                        f"{'üì∏ –° –º–µ–¥–∏–∞' if has_media else ''}\n\n"
                    )

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                *[[InlineKeyboardButton(text=f"–û—Ç–∑—ã–≤ #{r.id}", callback_data=f"view_review_{r.id}")]
                  for r in reviews[start_idx:end_idx]],
                *([[
                    InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"reviews_page_{page-1}") if page > 0 else None,
                    InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°", callback_data=f"reviews_page_{page+1}")
                    if end_idx < len(reviews) else None
                ]] if reviews else []),
                [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="master_menu")]
            ])
            keyboard.inline_keyboard = [[btn for btn in row if btn] for row in keyboard.inline_keyboard if any(row)]

            sent_message = await send_message(
                bot, str(callback.message.chat.id), "photo",
                response,
                photo=get_photo_path("reviews"),
                reply_markup=keyboard
            )
            if sent_message:
                await state.update_data(last_message_id=sent_message.message_id)
            await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç–∑—ã–≤–æ–≤ #{page}: {str(e)}")
        await callback.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@master_info_router.callback_query(F.data.startswith("view_review_"))
async def view_review_media(callback: CallbackQuery, state: FSMContext, bot: Bot):
    review_id = int(callback.data.replace("view_review_", ""))
    try:
        with Session() as session:
            review = session.query(Review).get(review_id)
            if not review:
                await callback.answer("–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            msk = pytz.timezone("Europe/Moscow")
            rating = f"{'‚≠ê' * review.rating}" if review.rating else "–ë–µ–∑ —Ä–µ–π—Ç–∏–Ω–≥–∞"
            response = (
                f"<b>–û—Ç–∑—ã–≤ #{review.id}</b>\n"
                f"üìÖ {review.created_at.astimezone(msk).strftime('%d.%m.%Y')}\n"
                f"‚≠ê {rating}\n"
                f"{review.text}\n"
            )
            photos = [p for p in [review.photo1, review.photo2, review.photo3] if p]
            video = review.video
            if photos or video:
                if photos:
                    for i, photo in enumerate(photos, 1):
                        await send_message(
                            bot, str(callback.message.chat.id), "photo",
                            response if i == 1 else None,
                            photo=photo
                        )
                if video:
                    await send_message(
                        bot, str(callback.message.chat.id), "video",
                        response if not photos else None,
                        video=video
                    )
            else:
                await send_message(
                    bot, str(callback.message.chat.id), "text",
                    response,
                    reply_markup=get_master_menu_kb()
                )
            await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–¥–∏–∞ –æ—Ç–∑—ã–≤–∞ #{review_id}: {str(e)}")
        await callback.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@master_info_router.callback_query(F.data == "master_works")
async def show_master_works(callback: CallbackQuery, state: FSMContext, bot: Bot):
    try:
        response = (
            f"{await get_progress_bar('works', MASTER_PROGRESS_STEPS, style='emoji')}\n"
            f"<b>üõ†Ô∏è –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç</b>\n"
            f"–ß—Ç–æ –º—ã —É–º–µ–µ–º:\n"
            f"üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ —Ä–µ–º–æ–Ω—Ç –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π\n"
            f"üöó –ü–æ–ª–Ω–æ–µ –¢–û –∏ –∑–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞\n"
            f"‚öôÔ∏è –†–µ–º–æ–Ω—Ç —Ö–æ–¥–æ–≤–æ–π –∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏\n"
            f"üì∏ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –Ω–∞—à–∏—Ö —Ä–∞–±–æ—Ç!"
        )
        sent_message = await send_message(
            bot, str(callback.message.chat.id), "photo",
            response,
            photo=get_photo_path("works"),
            reply_markup=get_master_menu_kb()
        )
        if sent_message:
            await state.update_data(last_message_id=sent_message.message_id)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–∏–º–µ—Ä–æ–≤ —Ä–∞–±–æ—Ç: {str(e)}")
        await callback.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")