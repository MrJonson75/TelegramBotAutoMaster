from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup
from config import get_photo_path, ADMIN_ID
from database import Session, User, Auto, Booking, BookingStatus
from keyboards.main_kb import Keyboards
from datetime import datetime
import pytz
from utils import setup_logger

logger = setup_logger(__name__)

my_bookings_router = Router()

@my_bookings_router.message(F.text == "–ú–æ–∏ –∑–∞–ø–∏—Å–∏")
async def list_bookings(message: Message):
    logger.info(f"User {message.from_user.id} requested bookings")
    try:
        with Session() as session:
            user = session.query(User).filter_by(telegram_id=str(message.from_user.id)).first()
            if not user:
                await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ —Å –∑–∞–ø–∏—Å–∏ –Ω–∞ –¢–û.",
                                     reply_markup=Keyboards.main_menu_kb())
                return
            tz = pytz.timezone('Asia/Dubai')
            now = datetime.now(tz)
            bookings = session.query(Booking).filter(
                Booking.user_id == user.id,
                Booking.status.in_([BookingStatus.PENDING, BookingStatus.CONFIRMED]),
                (Booking.date > now.date()) | (
                    (Booking.date == now.date()) & (Booking.time >= now.time())
                )
            ).order_by(Booking.created_at.desc()).all()
            if not bookings:
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.", reply_markup=Keyboards.main_menu_kb())
                return
            response = "üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏:\n\n"
            keyboard = []
            for booking in bookings:
                auto = session.query(Auto).get(booking.auto_id)
                status = {
                    BookingStatus.PENDING: "–û–∂–∏–¥–∞–µ—Ç",
                    BookingStatus.CONFIRMED: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ",
                    BookingStatus.REJECTED: "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
                }[booking.status]
                description = f"\n–û–ø–∏—Å–∞–Ω–∏–µ: {booking.description}" if booking.description else ""
                response += (
                    f"–ó–∞—è–≤–∫–∞ #{booking.id}: {booking.service_name} ({booking.price or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'} ‚ÇΩ), "
                    f"{auto.brand} {auto.license_plate}, "
                    f"{booking.date.strftime('%d.%m.%Y')} {booking.time.strftime('%H:%M')}, "
                    f"{status}{description}\n"
                )
                if booking.status in [BookingStatus.PENDING, BookingStatus.CONFIRMED]:
                    keyboard.append([InlineKeyboardButton(text=f"–û—Ç–º–µ–Ω–∏—Ç—å #{booking.id}", callback_data=f"cancel_booking_{booking.id}")])
            if len(response) > 1024:
                logger.warning(f"–ü–æ–¥–ø–∏—Å—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è ({len(response)} —Å–∏–º–≤–æ–ª–æ–≤), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ç–æ")
                await message.answer(
                    response,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard) if keyboard else Keyboards.main_menu_kb()
                )
                return
            try:
                photo_path = get_photo_path("bookings")
                await message.answer_photo(
                    photo=FSInputFile(photo_path),
                    caption=response,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard) if keyboard else Keyboards.main_menu_kb()
                )
            except (FileNotFoundError, ValueError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
                await message.answer(
                    response,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard) if keyboard else Keyboards.main_menu_kb()
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π: {str(e)}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                             reply_markup=Keyboards.main_menu_kb())

@my_bookings_router.callback_query(F.data.startswith("cancel_booking_"))
async def cancel_booking(callback: CallbackQuery, bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏."""
    logger.info(f"User {callback.from_user.id} requested to cancel booking")
    try:
        booking_id = int(callback.data.replace("cancel_booking_", ""))
        with Session() as session:
            booking = session.query(Booking).get(booking_id)
            if not booking:
                await callback.message.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=Keyboards.main_menu_kb())
                await callback.answer()
                return
            user = session.query(User).filter_by(telegram_id=str(callback.from_user.id)).first()
            if booking.user_id != user.id:
                await callback.message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —á—É–∂—É—é –∑–∞–ø–∏—Å—å.", reply_markup=Keyboards.main_menu_kb())
                await callback.answer()
                return
            if booking.status not in [BookingStatus.PENDING, BookingStatus.CONFIRMED]:
                await callback.message.answer("–≠—Ç–∞ –∑–∞–ø–∏—Å—å —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=Keyboards.main_menu_kb())
                await callback.answer()
                return
            booking.status = BookingStatus.REJECTED
            booking.rejection_reason = "–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
            session.commit()
            logger.info(f"Booking {booking_id} cancelled by user {callback.from_user.id}")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            auto = session.query(Auto).get(booking.auto_id)
            await callback.message.answer(
                f"–ó–∞—è–≤–∫–∞ #{booking.id} ({booking.service_name}, {auto.brand} {auto.license_plate}) —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=Keyboards.main_menu_kb()
            )

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É
            message_text = (
                f"‚ùå –ó–∞—è–≤–∫–∞ #{booking.id} –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º\n"
                f"–ö–ª–∏–µ–Ω—Ç: {user.first_name} {user.last_name}\n"
                f"–ê–≤—Ç–æ: {auto.brand} {auto.license_plate}\n"
                f"–£—Å–ª—É–≥–∞: {booking.service_name}\n"
                f"–î–∞—Ç–∞: {booking.date.strftime('%d.%m.%Y')}\n"
                f"–í—Ä–µ–º—è: {booking.time.strftime('%H:%M')}"
            )
            await bot.send_message(ADMIN_ID, message_text)

            await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ {booking_id}: {str(e)}")
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=Keyboards.main_menu_kb())
        await callback.answer()

@my_bookings_router.message(F.text == "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π")
async def list_history(message: Message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏."""
    logger.info(f"User {message.from_user.id} requested booking history")
    try:
        with Session() as session:
            user = session.query(User).filter_by(telegram_id=str(message.from_user.id)).first()
            if not user:
                await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ —Å –∑–∞–ø–∏—Å–∏ –Ω–∞ –¢–û.",
                                     reply_markup=Keyboards.main_menu_kb())
                return
            bookings = session.query(Booking).filter(
                Booking.user_id == user.id,
                Booking.status == BookingStatus.REJECTED
            ).order_by(Booking.created_at.desc()).all()
            if not bookings:
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.",
                                     reply_markup=Keyboards.main_menu_kb())
                return
            response = "üìú –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π:\n\n"
            for booking in bookings:
                auto = session.query(Auto).get(booking.auto_id)
                status = "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
                description = f"\n–û–ø–∏—Å–∞–Ω–∏–µ: {booking.description}" if booking.description else ""
                reason = f"\n–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {booking.rejection_reason}" if booking.rejection_reason else ""
                response += (
                    f"–ó–∞—è–≤–∫–∞ #{booking.id}: {booking.service_name} ({booking.price or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'} ‚ÇΩ), "
                    f"{auto.brand} {auto.license_plate}, "
                    f"{booking.date.strftime('%d.%m.%Y')} {booking.time.strftime('%H:%M')}, "
                    f"{status}{description}{reason}\n"
                )
            if len(response) > 1024:
                await message.answer(response, reply_markup=Keyboards.main_menu_kb())
                return
            try:
                photo_path = get_photo_path("bookings_list")
                await message.answer_photo(
                    photo=FSInputFile(photo_path),
                    caption=response,
                    reply_markup=Keyboards.main_menu_kb()
                )
            except (FileNotFoundError, ValueError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø–∏—Å–µ–π: {str(e)}")
                await message.answer(response, reply_markup=Keyboards.main_menu_kb())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø–∏—Å–µ–π: {str(e)}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                             reply_markup=Keyboards.main_menu_kb())