from aiogram import Router, F, Bot
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import hashlib
import os
from PIL import Image
from io import BytesIO
from config import get_photo_path
from utils import setup_logger, analyze_text_description, analyze_images, delete_previous_message
from keyboards.main_kb import Keyboards

photo_diagnostic_router = Router()
logger = setup_logger(__name__)

# –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ
MEDIA_DIR = "media/diagnostics"
os.makedirs(MEDIA_DIR, exist_ok=True)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class DiagnosticStates(StatesGroup):
    AwaitingChoice = State()
    AwaitingTextDescription = State()
    AwaitingPhoto = State()
    AwaitingPhotoDescription = State()

# –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
def get_progress_bar(current: int, total: int = 3) -> str:
    filled = "‚ñà" * current
    empty = " " * (total - current)
    return f"[{filled}{empty}] {current}/{total}"

def validate_photo_size(photo) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ñ–æ—Ç–æ (640x480)."""
    return photo.width >= 640 and photo.height >= 480

def validate_photo_format(image_data: bytes) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPEG/PNG)."""
    try:
        img = Image.open(BytesIO(image_data))
        return img.format in ["JPEG", "PNG"]
    except:
        return False

def get_image_hash(image_data: bytes) -> str:
    """–í—ã—á–∏—Å–ª—è–µ—Ç MD5-—Ö–µ—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    return hashlib.md5(image_data).hexdigest()

async def get_cached_result(image_hash: str) -> str:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—ç—à –≤ —Ñ–∞–π–ª–µ."""
    cache_file = os.path.join(MEDIA_DIR, "cache.txt")
    try:
        with open(cache_file, "r", encoding="utf-8") as f:
            for line in f:
                if line.startswith(image_hash):
                    return line.split(":", 1)[1].strip()
    except:
        return None
    return None

async def cache_result(image_hash: str, result: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à."""
    cache_file = os.path.join(MEDIA_DIR, "cache.txt")
    try:
        with open(cache_file, "a", encoding="utf-8") as f:
            f.write(f"{image_hash}:{result}\n")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")

@photo_diagnostic_router.message(F.text == "–ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ —Ñ–æ—Ç–æ")
async def start_diagnostic(message: Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏, –ø—Ä–µ–¥–ª–∞–≥–∞—è –≤—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞."""
    logger.info(f"Starting photo diagnostic for user {message.from_user.id}")
    try:
        photo_path = get_photo_path("photo_diagnostic")
        await message.answer_photo(
            photo=FSInputFile(photo_path),
            caption="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:",
            reply_markup=Keyboards.diagnostic_choice_kb()
        )
    except (FileNotFoundError, ValueError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {str(e)}")
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:",
            reply_markup=Keyboards.diagnostic_choice_kb()
        )
    await state.set_state(DiagnosticStates.AwaitingChoice)
    logger.debug(f"Set state to AwaitingChoice for user {message.from_user.id}")


@photo_diagnostic_router.callback_query(F.data.in_(["text_diagnostic", "start_photo_diagnostic"]))
async def handle_diagnostic_choice(callback: CallbackQuery, state: FSMContext, bot: Bot):
    logger.debug(f"Received callback data: {callback.data} for user {callback.from_user.id}")
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        await state.update_data(last_message_id=callback.message.message_id)

        if callback.data == "text_diagnostic":
            await delete_previous_message(bot, callback.message.chat.id, callback.message.message_id)
            message = await callback.message.answer(
                "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º —Ç–µ–∫—Å—Ç–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—Å—Ç—É—á–∏—Ç –ø–æ–¥–≤–µ—Å–∫–∞').",
                reply_markup=Keyboards.main_menu_kb()
            )
            await state.update_data(last_message_id=message.message_id)
            await state.set_state(DiagnosticStates.AwaitingTextDescription)
        elif callback.data == "start_photo_diagnostic":
            await delete_previous_message(bot, callback.message.chat.id, callback.message.message_id)
            message = await callback.message.answer(
                "üì∏ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É üìé –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ 1‚Äì3 —Ñ–æ—Ç–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏...",
                reply_markup=Keyboards.photo_upload_kb()
            )
            await state.update_data(last_message_id=message.message_id)
            await state.set_state(DiagnosticStates.AwaitingPhoto)
            await state.update_data(photos=[])
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback {callback.data}: {str(e)}")
        await callback.message.answer("–û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∑–∞–Ω–æ–≤–æ.", reply_markup=Keyboards.main_menu_kb())
        await state.clear()
        await callback.answer()

@photo_diagnostic_router.message(DiagnosticStates.AwaitingTextDescription, F.text)
async def handle_text_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã."""
    try:
        description = message.text.strip()
        if len(description) < 5:
            await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.", reply_markup=Keyboards.main_menu_kb())
            return
        logger.info(f"Processing text description: {description[:50]}... for user {message.from_user.id}")
        analysis = await analyze_text_description(description)
        try:
            photo_path = get_photo_path("photo_result_diagnostic")
            await message.answer_photo(
                photo=FSInputFile(photo_path),
                caption=f"üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:\n"
                        f"–ê–Ω–∞–ª–∏–∑:\n{analysis}\n"
                        f"–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: {description}\n\n"
                        "üìã –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—á–Ω—ã–π –æ—Å–º–æ—Ç—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
                reply_markup=Keyboards.main_menu_kb()
            )
        except (FileNotFoundError, ValueError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {str(e)}")
            await message.answer(
                f"üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:\n"
                f"–ê–Ω–∞–ª–∏–∑:\n{analysis}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: {description}\n\n"
                "üìã –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—á–Ω—ã–π –æ—Å–º–æ—Ç—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
                reply_markup=Keyboards.main_menu_kb()
            )
        await state.clear()
        logger.debug(f"Cleared state for user {message.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è: {str(e)}")
        await message.answer("–û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∑–∞–Ω–æ–≤–æ.", reply_markup=Keyboards.main_menu_kb())
        await state.clear()

@photo_diagnostic_router.message(DiagnosticStates.AwaitingPhoto, F.photo)
async def handle_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ."""
    try:
        photo = message.photo[-1]
        if not validate_photo_size(photo):
            await message.answer("–û—à–∏–±–∫–∞: —Ñ–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ (–º–∏–Ω. 640x480).", reply_markup=Keyboards.main_menu_kb())
            return
        if photo.file_size > 5 * 1024 * 1024:
            await message.answer("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å. 5MB).", reply_markup=Keyboards.main_menu_kb())
            return

        file = await message.bot.get_file(photo.file_id)
        photo_bytes = await message.bot.download_file(file.file_path)
        image_data = photo_bytes.read()

        if not validate_photo_format(image_data):
            await message.answer("–û—à–∏–±–∫–∞: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ JPEG –∏ PNG.", reply_markup=Keyboards.main_menu_kb())
            return

        data = await state.get_data()
        photos = data.get("photos", [])
        photos.append(image_data)
        await state.update_data(photos=photos)

        logger.debug(f"Photo uploaded, total: {len(photos)} for user {message.from_user.id}")
        if len(photos) < 3:
            await message.answer(
                f"–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.\n"
                f"{get_progress_bar(len(photos))}\n"
                f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É üìé –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–æ—Ç–æ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ \"–ì–æ—Ç–æ–≤–æ\".",
                reply_markup=Keyboards.photo_upload_kb()
            )
        else:
            await message.answer(
                f"–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.\n"
                f"{get_progress_bar(len(photos))}\n"
                f"–ù–∞–∂–º–∏—Ç–µ \"–ì–æ—Ç–æ–≤–æ\" –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.",
                reply_markup=Keyboards.photo_upload_kb()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {str(e)}")
        await message.answer(
            "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=Keyboards.photo_upload_kb()
        )
        await state.clear()

@photo_diagnostic_router.callback_query(DiagnosticStates.AwaitingPhoto, F.data == "photos_ready")
async def process_photos(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ."""
    data = await state.get_data()
    photos = data.get("photos", [])
    if not photos:
        await callback.message.answer("–§–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å–Ω–æ–≤–∞.", reply_markup=Keyboards.main_menu_kb())
        await state.clear()
        await callback.answer()
        return

    try:
        image_hashes = [get_image_hash(photo) for photo in photos]
        cached_results = []
        for image_hash in image_hashes:
            cached = await get_cached_result(image_hash)
            if cached:
                cached_results.append(cached)
        if len(cached_results) == len(photos):
            analysis = "\n".join(cached_results)
            await state.update_data(analysis=analysis)
        else:
            await state.update_data(photos=photos)

        await callback.message.answer(
            "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º —Ç–µ–∫—Å—Ç–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–≥–æ—Ä–∏—Ç —á–µ–∫, –∫–æ–¥ P0420').",
            reply_markup=Keyboards.main_menu_kb()
        )
        await state.set_state(DiagnosticStates.AwaitingPhotoDescription)
        logger.debug(f"Set state to AwaitingPhotoDescription for user {callback.from_user.id}")
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
        await callback.message.answer("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å–Ω–æ–≤–∞.", reply_markup=Keyboards.main_menu_kb())
        await state.clear()
        await callback.answer()
    finally:
        for i in range(len(photos)):
            file_path = os.path.join(MEDIA_DIR, f"{callback.from_user.id}_{i}.jpg")
            if os.path.exists(file_path):
                os.remove(file_path)

@photo_diagnostic_router.message(DiagnosticStates.AwaitingPhotoDescription, F.text)
async def handle_photo_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ."""
    try:
        description = message.text.strip()
        if len(description) < 5:
            await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.", reply_markup=Keyboards.main_menu_kb())
            return
        data = await state.get_data()
        photos = data.get("photos", [])
        if photos:
            logger.info(f"Processing {len(photos)} photos with description: {description[:50]}... for user {message.from_user.id}")
            analysis = await analyze_images(photos, description)
            image_hashes = [get_image_hash(photo) for photo in photos]
            for image_hash in image_hashes:
                await cache_result(image_hash, analysis)
        else:
            logger.info(f"Processing description without photos: {description[:50]}... for user {message.from_user.id}")
            analysis = await analyze_text_description(description)
        try:
            photo_path = get_photo_path("photo_result_diagnostic")
            await message.answer_photo(
                photo=FSInputFile(photo_path),
                caption=f"üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:\n"
                        f"–ê–Ω–∞–ª–∏–∑:\n{analysis}\n"
                        f"–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: {description}\n\n"
                        "üìã –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—á–Ω—ã–π –æ—Å–º–æ—Ç—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
                reply_markup=Keyboards.main_menu_kb()
            )
        except (FileNotFoundError, ValueError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {str(e)}")
            await message.answer(
                f"üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:\n"
                f"–ê–Ω–∞–ª–∏–∑:\n{analysis}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: {description}\n\n"
                "üìã –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—á–Ω—ã–π –æ—Å–º–æ—Ç—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
                reply_markup=Keyboards.main_menu_kb()
            )
        await state.clear()
        logger.debug(f"Cleared state for user {message.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è: {str(e)}")
        await message.answer("–û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∑–∞–Ω–æ–≤–æ.", reply_markup=Keyboards.main_menu_kb())
        await state.clear()

@photo_diagnostic_router.message(DiagnosticStates.AwaitingPhoto)
async def invalid_photo_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ."""
    data = await state.get_data()
    photos = data.get("photos", [])
    await message.answer(
        f"üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É üìé –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–æ—Ç–æ.\n"
        f"{get_progress_bar(len(photos))}",
        reply_markup=Keyboards.photo_upload_kb()
    )

@photo_diagnostic_router.message(DiagnosticStates.AwaitingChoice)
async def invalid_choice_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã–±–æ—Ä–∞."""
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏.",
        reply_markup=Keyboards.diagnostic_choice_kb()
    )

@photo_diagnostic_router.message(DiagnosticStates.AwaitingTextDescription)
async def invalid_text_description_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è."""
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã.",
        reply_markup=Keyboards.main_menu_kb()
    )

@photo_diagnostic_router.message(DiagnosticStates.AwaitingPhotoDescription)
async def invalid_photo_description_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å–ª–µ —Ñ–æ—Ç–æ."""
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã.",
        reply_markup=Keyboards.main_menu_kb()
    )