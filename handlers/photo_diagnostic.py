from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging
import hashlib
import os
from PIL import Image
from io import BytesIO
from utils.gpt_helper import analyze_text_description
from utils.vision_api import analyze_images
from keyboards.main_kb import main_menu_kb

photo_diagnostic_router = Router()
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
console_handler = logging.StreamHandler()
console_handler.setFormatter(formatter)
console_handler.setLevel(logging.INFO)
console_handler.stream.reconfigure(encoding='utf-8')
file_handler = logging.FileHandler("bot.log", encoding="utf-8")
file_handler.setFormatter(formatter)
file_handler.setLevel(logging.INFO)
logger.handlers = [console_handler, file_handler]

# –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ
MEDIA_DIR = "media/diagnostics"
os.makedirs(MEDIA_DIR, exist_ok=True)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class DiagnosticStates(StatesGroup):
    AwaitingChoice = State()
    AwaitingTextDescription = State()
    AwaitingPhoto = State()
    AwaitingPhotoDescription = State()
    AwaitingMileage = State()

# –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
def diagnostic_choice_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º", callback_data="text_diagnostic")],
        [InlineKeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="photo_diagnostic")]
    ])

def validate_photo_size(photo) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ñ–æ—Ç–æ (640x480)."""
    return photo.width >= 640 and photo.height >= 480

def validate_photo_format(image_data: bytes) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPEG/PNG)."""
    try:
        img = Image.open(BytesIO(image_data))
        return img.format in ["JPEG", "PNG"]
    except:
        return False

def get_image_hash(image_data: bytes) -> str:
    """–í—ã—á–∏—Å–ª—è–µ—Ç MD5-—Ö–µ—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    return hashlib.md5(image_data).hexdigest()

async def get_cached_result(image_hash: str) -> str:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—ç—à –≤ —Ñ–∞–π–ª–µ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ redis, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)."""
    cache_file = os.path.join(MEDIA_DIR, "cache.txt")
    try:
        with open(cache_file, "r", encoding="utf-8") as f:
            for line in f:
                if line.startswith(image_hash):
                    return line.split(":", 1)[1].strip()
    except:
        return None
    return None

async def cache_result(image_hash: str, result: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à."""
    cache_file = os.path.join(MEDIA_DIR, "cache.txt")
    try:
        with open(cache_file, "a", encoding="utf-8") as f:
            f.write(f"{image_hash}:{result}\n")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")

@photo_diagnostic_router.message(F.text.lower().contains("–±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ —Ñ–æ—Ç–æ"))
async def start_diagnostic(message: Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏, –ø—Ä–µ–¥–ª–∞–≥–∞—è –≤—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞."""
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:",
        reply_markup=diagnostic_choice_kb()
    )
    await state.set_state(DiagnosticStates.AwaitingChoice)

@photo_diagnostic_router.callback_query(DiagnosticStates.AwaitingChoice, F.data == "text_diagnostic")
async def choose_text_diagnostic(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è."""
    await callback.message.answer(
        "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º —Ç–µ–∫—Å—Ç–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—Å—Ç—É—á–∏—Ç –ø–æ–¥–≤–µ—Å–∫–∞').",
        reply_markup=main_menu_kb()
    )
    await state.set_state(DiagnosticStates.AwaitingTextDescription)
    await callback.answer()

@photo_diagnostic_router.callback_query(DiagnosticStates.AwaitingChoice, F.data == "photo_diagnostic")
async def choose_photo_diagnostic(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ."""
    await callback.message.answer(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ 1‚Äì3 —Ñ–æ—Ç–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏–±–æ—Ä–Ω–∞—è –ø–∞–Ω–µ–ª—å, –∫—É–∑–æ–≤, –¥–µ—Ç–∞–ª–∏). "
        "–î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤–Ω–µ—à–Ω–∏–º —Å–µ—Ä–≤–∏—Å–æ–º.",
        reply_markup=main_menu_kb()
    )
    await state.set_state(DiagnosticStates.AwaitingPhoto)
    await state.update_data(photos=[])
    await callback.answer()

@photo_diagnostic_router.message(DiagnosticStates.AwaitingTextDescription, F.text)
async def handle_text_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã."""
    try:
        description = message.text.strip()
        if len(description) < 5:
            await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.")
            return
        # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Yandex GPT
        analysis = await analyze_text_description(description)
        await state.update_data(description=description, analysis=analysis)
        await message.answer(
            "–°–∫–æ–ª—å–∫–æ –∫–º –ø—Ä–æ–±–µ–≥–∞ —É –∞–≤—Ç–æ–º–æ–±–∏–ª—è?",
            reply_markup=main_menu_kb()
        )
        await state.set_state(DiagnosticStates.AwaitingMileage)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è: {str(e)}")
        await message.answer("–û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∑–∞–Ω–æ–≤–æ.", reply_markup=main_menu_kb())
        await state.clear()

@photo_diagnostic_router.message(DiagnosticStates.AwaitingPhoto, F.photo)
async def handle_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ."""
    try:
        photo = message.photo[-1]
        if not validate_photo_size(photo):
            await message.answer("–û—à–∏–±–∫–∞: —Ñ–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ (–º–∏–Ω. 640x480).")
            return
        if photo.file_size > 5 * 1024 * 1024:
            await message.answer("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å. 5MB).")
            return

        file = await message.bot.get_file(photo.file_id)
        photo_bytes = await message.bot.download_file(file.file_path)
        image_data = photo_bytes.read()

        if not validate_photo_format(image_data):
            await message.answer("–û—à–∏–±–∫–∞: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ JPEG –∏ PNG.")
            return

        data = await state.get_data()
        photos = data.get("photos", [])
        photos.append(image_data)
        await state.update_data(photos=photos)

        if len(photos) < 3:
            await message.answer(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(photos)} —Ñ–æ—Ç–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.")
        else:
            await message.answer("–ó–∞–≥—Ä—É–∂–µ–Ω–æ 3 —Ñ–æ—Ç–æ. –ù–∞–ø–∏—à–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {str(e)}")
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_menu_kb())
        await state.clear()

@photo_diagnostic_router.message(DiagnosticStates.AwaitingPhoto, F.text.lower() == "–≥–æ—Ç–æ–≤–æ")
async def process_photos(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ."""
    data = await state.get_data()
    photos = data.get("photos", [])
    if not photos:
        await message.answer("–§–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å–Ω–æ–≤–∞.", reply_markup=main_menu_kb())
        await state.clear()
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        image_hashes = [get_image_hash(photo) for photo in photos]
        cached_results = []
        for image_hash in image_hashes:
            cached = await get_cached_result(image_hash)
            if cached:
                cached_results.append(cached)
        if len(cached_results) == len(photos):
            analysis = "\n".join(cached_results)
            await state.update_data(analysis=analysis)
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            await state.update_data(photos=photos)

        await message.answer(
            "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º —Ç–µ–∫—Å—Ç–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–≥–æ—Ä–∏—Ç —á–µ–∫, –∫–æ–¥ P0420').",
            reply_markup=main_menu_kb()
        )
        await state.set_state(DiagnosticStates.AwaitingPhotoDescription)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
        await message.answer("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å–Ω–æ–≤–∞.", reply_markup=main_menu_kb())
        await state.clear()
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        for i in range(len(photos)):
            file_path = os.path.join(MEDIA_DIR, f"{message.from_user.id}_{i}.jpg")
            if os.path.exists(file_path):
                os.remove(file_path)

@photo_diagnostic_router.message(DiagnosticStates.AwaitingPhotoDescription, F.text)
async def handle_photo_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ."""
    try:
        description = message.text.strip()
        if len(description) < 5:
            await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.")
            return
        data = await state.get_data()
        photos = data.get("photos", [])
        if photos:
            # –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —á–µ—Ä–µ–∑ Yandex Vision + GPT
            analysis = await analyze_images(photos, description)
        else:
            # –ê–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Yandex GPT
            analysis = await analyze_text_description(description)
        await state.update_data(description=description, analysis=analysis)
        await message.answer(
            "–°–∫–æ–ª—å–∫–æ –∫–º –ø—Ä–æ–±–µ–≥–∞ —É –∞–≤—Ç–æ–º–æ–±–∏–ª—è?",
            reply_markup=main_menu_kb()
        )
        await state.set_state(DiagnosticStates.AwaitingMileage)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è: {str(e)}")
        await message.answer("–û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∑–∞–Ω–æ–≤–æ.", reply_markup=main_menu_kb())
        await state.clear()

@photo_diagnostic_router.message(DiagnosticStates.AwaitingMileage, F.text)
async def process_mileage(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–±–µ–≥ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É."""
    try:
        mileage = message.text.strip()
        if not mileage.isdigit():
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–±–µ–≥ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö (—á–∏—Å–ª–æ).")
            return
        data = await state.get_data()
        analysis = data.get("analysis", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        description = data.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")
        await message.answer(
            f"üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (–ø—Ä–æ–±–µ–≥: {mileage} –∫–º):\n"
            f"–ê–Ω–∞–ª–∏–∑:\n{analysis}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: {description}\n\n"
            "üìã –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—á–Ω—ã–π –æ—Å–º–æ—Ç—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
            reply_markup=main_menu_kb()
        )
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–±–µ–≥–∞: {str(e)}")
        await message.answer("–û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∑–∞–Ω–æ–≤–æ.", reply_markup=main_menu_kb())
        await state.clear()

@photo_diagnostic_router.message(DiagnosticStates.AwaitingPhoto)
async def invalid_photo_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ."""
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.",
        reply_markup=main_menu_kb()
    )

@photo_diagnostic_router.message(DiagnosticStates.AwaitingChoice)
async def invalid_choice_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã–±–æ—Ä–∞."""
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏.",
        reply_markup=diagnostic_choice_kb()
    )

@photo_diagnostic_router.message(DiagnosticStates.AwaitingTextDescription)
async def invalid_text_description_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è."""
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã.",
        reply_markup=main_menu_kb()
    )

@photo_diagnostic_router.message(DiagnosticStates.AwaitingPhotoDescription)
async def invalid_photo_description_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å–ª–µ —Ñ–æ—Ç–æ."""
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã.",
        reply_markup=main_menu_kb()
    )