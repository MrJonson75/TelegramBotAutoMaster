from datetime import datetime
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from pydantic import ValidationError
from keyboards.main_kb import Keyboards
from utils import setup_logger, UserInput, AutoInput
from database import User, Auto, Booking, BookingStatus, Session
from .service_utils import send_message, handle_error, get_progress_bar
from config import get_photo_path

profile_router = Router()
logger = setup_logger(__name__)

class ProfileStates(StatesGroup):
    MainMenu = State()
    EditingProfile = State()
    AwaitingFirstName = State()
    AwaitingLastName = State()
    AwaitingPhone = State()
    ManagingAutos = State()
    AwaitingAutoBrand = State()
    AwaitingAutoYear = State()
    AwaitingAutoVin = State()
    AwaitingAutoLicensePlate = State()
    RegisterAwaitingPhone = State()
    RegisterConfirm = State()
    ViewingBooking = State()

PROFILE_PROGRESS_STEPS = {
    str(ProfileStates.AwaitingFirstName): 1,
    str(ProfileStates.AwaitingLastName): 2,
    str(ProfileStates.AwaitingPhone): 3,
    str(ProfileStates.AwaitingAutoBrand): 1,
    str(ProfileStates.AwaitingAutoYear): 2,
    str(ProfileStates.AwaitingAutoVin): 3,
    str(ProfileStates.AwaitingAutoLicensePlate): 4,
    str(ProfileStates.RegisterAwaitingPhone): 1,
    str(ProfileStates.RegisterConfirm): 2
}

@profile_router.message(F.text == "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üë§")
async def enter_profile(message: Message, state: FSMContext, bot: Bot):
    """–í—Ö–æ–¥ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏–ª–∏ –Ω–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–æ—à—ë–ª –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
    try:
        with Session() as session:
            user = session.query(User).filter_by(telegram_id=str(message.from_user.id)).first()
            if user:
                response = (
                    f"<b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b> üë§\n"
                    f"–ò–º—è: {user.first_name}\n"
                    f"–§–∞–º–∏–ª–∏—è: {user.last_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {user.phone or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                    f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                    f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user.birth_date or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                )
                try:
                    photo_path = get_photo_path("profile")
                    sent_message = await send_message(
                        bot, str(message.chat.id), "photo",
                        response,
                        photo=photo_path,
                        reply_markup=Keyboards.profile_menu_kb()
                    )
                except FileNotFoundError as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è {message.from_user.id}: {str(e)}")
                    sent_message = await send_message(
                        bot, str(message.chat.id), "text",
                        response,
                        reply_markup=Keyboards.profile_menu_kb()
                    )
                if sent_message:
                    logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {message.from_user.id}")
                    await state.update_data(last_message_id=sent_message.message_id)
                    await state.set_state(ProfileStates.MainMenu)
                return

            user_data = {
                "telegram_id": str(message.from_user.id),
                "first_name": message.from_user.first_name,
                "last_name": message.from_user.last_name,
                "username": message.from_user.username,
                "phone": None,
                "birth_date": None
            }
            await state.update_data(user_data=user_data)

            keyboard = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
            sent_message = await send_message(
                bot, str(message.chat.id), "text",
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ: üìû",
                reply_markup=keyboard
            )
            if sent_message:
                await state.update_data(last_message_id=sent_message.message_id)
                await state.set_state(ProfileStates.RegisterAwaitingPhone)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è {message.from_user.id}: {str(e)}")
        await handle_error(message, state, bot, "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî", "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", e)

@profile_router.message(ProfileStates.RegisterAwaitingPhone, F.content_type == 'contact')
async def process_register_phone(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç")
    try:
        phone = message.contact.phone_number
        if not phone.startswith("+"):
            phone = f"+{phone}"
        UserInput.validate_phone(phone)
        data = await state.get_data()
        user_data = data["user_data"]
        user_data["phone"] = phone
        await state.update_data(user_data=user_data)
        await show_user_data(message, state, bot)
    except ValidationError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è {message.from_user.id}: {str(e)}")
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        sent_message = await send_message(
            bot, str(message.chat.id), "text",
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, –Ω–∞—á–∏–Ω–∞—è —Å +7 (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79991234567): üìû",
            reply_markup=keyboard
        )
        if sent_message:
            await state.update_data(last_message_id=sent_message.message_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è {message.from_user.id}: {str(e)}")
        await handle_error(message, state, bot, "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî", "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞", e)

async def show_user_data(message: Message, state: FSMContext, bot: Bot):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."""
    data = await state.get_data()
    user_data = data["user_data"]
    response = (
        "<b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b> üë§\n"
        f"–ò–º—è: {user_data['first_name']}\n"
        f"–§–∞–º–∏–ª–∏—è: {user_data['last_name'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data['username'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user_data['birth_date'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        "\n–î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É?"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å ‚úÖ", callback_data="confirm_register")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞ üö´", callback_data="cancel_register")]
    ])
    sent_message = await send_message(
        bot, str(message.chat.id), "text",
        response,
        reply_markup=keyboard
    )
    if sent_message:
        await state.update_data(last_message_id=sent_message.message_id)
        await state.set_state(ProfileStates.RegisterConfirm)

@profile_router.callback_query(ProfileStates.RegisterConfirm, F.data == "confirm_register")
async def confirm_register(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
    try:
        data = await state.get_data()
        user_data = data["user_data"]
        user_input = UserInput(
            first_name=user_data["first_name"],
            last_name=user_data["last_name"],
            phone=user_data["phone"]
        )
        with Session() as session:
            user = User(
                telegram_id=user_data["telegram_id"],
                first_name=user_input.first_name,
                last_name=user_input.last_name,
                phone=user_input.phone,
                username=user_data["username"],
                birth_date=user_data["birth_date"]
            )
            session.add(user)
            session.commit()
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            response = (
                f"<b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b> ‚úÖ\n"
                f"–ò–º—è: {user.first_name}\n"
                f"–§–∞–º–∏–ª–∏—è: {user.last_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {user.phone or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user.birth_date or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            )
            sent_message = await send_message(
                bot, str(callback.message.chat.id), "text",
                response,
                reply_markup=Keyboards.profile_menu_kb()
            )
            if sent_message:
                await state.update_data(last_message_id=sent_message.message_id)
                await state.set_state(ProfileStates.MainMenu)
            await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è {callback.from_user.id}: {str(e)}")
        await handle_error(callback, state, bot, "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî", "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", e)
        await callback.answer()

@profile_router.callback_query(ProfileStates.RegisterConfirm, F.data == "cancel_register")
async def cancel_register(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Ç–º–µ–Ω–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
    sent_message = await send_message(
        bot, str(callback.message.chat.id), "text",
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç' –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏. üë§",
        reply_markup=Keyboards.main_menu_kb()
    )
    if sent_message:
        await state.update_data(last_message_id=sent_message.message_id)
    await state.clear()
    await callback.answer()

@profile_router.callback_query(ProfileStates.MainMenu, F.data == "edit_profile")
async def edit_profile(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞—á–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è")
    sent_message = await send_message(
        bot, str(callback.message.chat.id), "text",
        (await get_progress_bar(ProfileStates.AwaitingFirstName, PROFILE_PROGRESS_STEPS, style="emoji")).format(
            message="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–∏–º—è</b>: üë§"
        )
    )
    if sent_message:
        await state.update_data(last_message_id=sent_message.message_id)
        await state.set_state(ProfileStates.AwaitingFirstName)
    await callback.answer()

@profile_router.message(ProfileStates.AwaitingFirstName, F.text)
async def process_first_name(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏."""
    from .service_utils import process_user_input
    await process_user_input(
        message, state, bot,
        UserInput.validate_first_name, "first_name",
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É <b>—Ñ–∞–º–∏–ª–∏—é</b> (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, –Ω–∞–∂–∞–≤ Enter): üë§",
        "–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–ª–∏ –¥–ª–∏–Ω–Ω–æ–µ (2‚Äì50 —Å–∏–º–≤–æ–ª–æ–≤). –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞: üòî",
        ProfileStates.AwaitingLastName,
        PROFILE_PROGRESS_STEPS
    )

@profile_router.message(ProfileStates.AwaitingLastName, F.text)
async def process_last_name(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–º–∏–ª–∏–∏."""
    from .service_utils import process_user_input
    def validate_last_name_or_none(value: str):
        if value.strip() == "":
            return None
        return UserInput.validate_last_name(value)
    await process_user_input(
        message, state, bot,
        validate_last_name_or_none, "last_name",
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞—á–∏–Ω–∞—è —Å <b>+7</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, <b>+79991234567</b>), –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º: üìû",
        "–§–∞–º–∏–ª–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è –∏–ª–∏ –¥–ª–∏–Ω–Ω–∞—è (2‚Äì50 —Å–∏–º–≤–æ–ª–æ–≤). –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞: üòî",
        ProfileStates.AwaitingPhone,
        PROFILE_PROGRESS_STEPS
    )

@profile_router.message(ProfileStates.AwaitingPhone, F.text)
async def process_phone(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª —Ç–µ–ª–µ—Ñ–æ–Ω")
    try:
        phone = message.text.strip()
        validated_phone = None
        if phone:
            validated_phone = UserInput.validate_phone(phone)
        data = await state.get_data()
        user_input = UserInput(
            first_name=data.get("first_name", ""),
            last_name=data.get("last_name"),
            phone=validated_phone
        )
        with Session() as session:
            user = session.query(User).filter_by(telegram_id=str(message.from_user.id)).first()
            user.first_name = user_input.first_name
            user.last_name = user_input.last_name
            user.phone = user_input.phone
            session.commit()
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ–±–Ω–æ–≤–∏–ª –¥–∞–Ω–Ω—ã–µ")
            response = (
                f"<b>–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã</b> ‚úÖ\n"
                f"–ò–º—è: {user.first_name}\n"
                f"–§–∞–º–∏–ª–∏—è: {user.last_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {user.phone or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user.birth_date or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            )
            try:
                photo_path = get_photo_path("profile_edit")
                sent_message = await send_message(
                    bot, str(message.chat.id), "photo",
                    response,
                    photo=photo_path,
                    reply_markup=Keyboards.profile_menu_kb()
                )
            except FileNotFoundError as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ profile_edit –¥–ª—è {message.from_user.id}: {str(e)}")
                sent_message = await send_message(
                    bot, str(message.chat.id), "text",
                    response,
                    reply_markup=Keyboards.profile_menu_kb()
                )
            if sent_message:
                await state.update_data(last_message_id=sent_message.message_id)
                await state.set_state(ProfileStates.MainMenu)
    except ValidationError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è {message.from_user.id}: {str(e)}")
        sent_message = await send_message(
            bot, str(message.chat.id), "text",
            (await get_progress_bar(ProfileStates.AwaitingPhone, PROFILE_PROGRESS_STEPS, style="emoji")).format(
                message="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, –Ω–∞—á–∏–Ω–∞—è —Å +7 (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79991234567), –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º: üìû"
            )
        )
        if sent_message:
            await state.update_data(last_message_id=sent_message.message_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {message.from_user.id}: {str(e)}")
        await handle_error(message, state, bot, "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî", "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", e)

@profile_router.callback_query(ProfileStates.MainMenu, F.data == "manage_autos")
async def manage_autos(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏")
    try:
        with Session() as session:
            user = session.query(User).filter_by(telegram_id=str(callback.from_user.id)).first()
            autos = session.query(Auto).filter_by(user_id=user.id).all()
            if not autos:
                sent_message = await send_message(
                    bot, str(callback.message.chat.id), "text",
                    "–£ –≤–∞—Å –Ω–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π. –í–≤–µ–¥–∏—Ç–µ <b>–º–∞—Ä–∫—É</b> –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, <b>Toyota</b>): üöó",
                    reply_markup=Keyboards.cancel_kb()
                )
                if sent_message:
                    await state.update_data(last_message_id=sent_message.message_id)
                    await state.set_state(ProfileStates.AwaitingAutoBrand)
                await callback.answer()
                return
            response = "<b>–í–∞—à–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏</b> üöó\n\n"
            for auto in autos:
                response += (
                    f"ID: {auto.id}\n"
                    f"–ú–∞—Ä–∫–∞: {auto.brand}\n"
                    f"–ì–æ–¥: {auto.year}\n"
                    f"–ì–æ—Å–Ω–æ–º–µ—Ä: {auto.license_plate}\n\n"
                )
            try:
                photo_path = get_photo_path("profile_list_auto")
                sent_message = await send_message(
                    bot, str(callback.message.chat.id), "photo",
                    response,
                    photo=photo_path,
                    reply_markup=Keyboards.auto_management_kb(autos)
                )
            except FileNotFoundError as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ profile_list_auto –¥–ª—è {callback.from_user.id}: {str(e)}")
                sent_message = await send_message(
                    bot, str(callback.message.chat.id), "text",
                    response,
                    reply_markup=Keyboards.auto_management_kb(autos)
                )
            if sent_message:
                await state.update_data(last_message_id=sent_message.message_id)
                await state.set_state(ProfileStates.ManagingAutos)
            await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏ –¥–ª—è {callback.from_user.id}: {str(e)}")
        await handle_error(callback, state, bot, "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî", "–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏", e)
        await callback.answer()

@profile_router.callback_query(ProfileStates.ManagingAutos, F.data == "add_auto")
async def add_auto(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
    sent_message = await send_message(
        bot, str(callback.message.chat.id), "text",
        (await get_progress_bar(ProfileStates.AwaitingAutoBrand, PROFILE_PROGRESS_STEPS, style="emoji")).format(
            message="–í–≤–µ–¥–∏—Ç–µ <b>–º–∞—Ä–∫—É</b> –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, <b>Toyota</b>): üöó"
        ),
        reply_markup=Keyboards.cancel_kb()
    )
    if sent_message:
        await state.update_data(last_message_id=sent_message.message_id)
        await state.set_state(ProfileStates.AwaitingAutoBrand)
    await callback.answer()

@profile_router.message(ProfileStates.AwaitingAutoBrand, F.text)
async def process_auto_brand(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è."""
    from .service_utils import process_user_input
    await process_user_input(
        message, state, bot,
        AutoInput.validate_brand, "brand",
        "–í–≤–µ–¥–∏—Ç–µ <b>–≥–æ–¥ –≤—ã–ø—É—Å–∫–∞</b> –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, <b>2020</b>): üìÖ",
        "–ú–∞—Ä–∫–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è –∏–ª–∏ –¥–ª–∏–Ω–Ω–∞—è (2‚Äì50 —Å–∏–º–≤–æ–ª–æ–≤). –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞: üòî",
        ProfileStates.AwaitingAutoYear,
        PROFILE_PROGRESS_STEPS,
        reply_markup=Keyboards.cancel_kb()
    )

@profile_router.message(ProfileStates.AwaitingAutoYear, F.text)
async def process_auto_year(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–¥–∞ –≤—ã–ø—É—Å–∫–∞."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –≥–æ–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
    try:
        year = int(message.text.strip())
        AutoInput.validate_year(year)
        await state.update_data(year=year)
        sent_message = await send_message(
            bot, str(message.chat.id), "text",
            (await get_progress_bar(ProfileStates.AwaitingAutoVin, PROFILE_PROGRESS_STEPS, style="emoji")).format(
                message="–í–≤–µ–¥–∏—Ç–µ <b>VIN-–Ω–æ–º–µ—Ä</b> –∞–≤—Ç–æ–º–æ–±–∏–ª—è (17 –±—É–∫–≤/—Ü–∏—Ñ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä, <b>JTDBT923771012345</b>): üî¢"
            ),
            reply_markup=Keyboards.cancel_kb()
        )
        if sent_message:
            await state.update_data(last_message_id=sent_message.message_id)
            await state.set_state(ProfileStates.AwaitingAutoVin)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–¥–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è {message.from_user.id}: {str(e)}")
        sent_message = await send_message(
            bot, str(message.chat.id), "text",
            (await get_progress_bar(ProfileStates.AwaitingAutoYear, PROFILE_PROGRESS_STEPS, style="emoji")).format(
                message=f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ (1900‚Äì{datetime.today().year}). –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞: üìÖ"
            ),
            reply_markup=Keyboards.cancel_kb()
        )
        if sent_message:
            await state.update_data(last_message_id=sent_message.message_id)

@profile_router.message(ProfileStates.AwaitingAutoVin, F.text)
async def process_auto_vin(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ VIN-–Ω–æ–º–µ—Ä–∞."""
    from .service_utils import process_user_input
    await process_user_input(
        message, state, bot,
        AutoInput.validate_vin, "vin",
        "–í–≤–µ–¥–∏—Ç–µ <b>–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä</b> –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, <b>–ê123–ë–í45</b>): üöò",
        "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π VIN (17 –±—É–∫–≤/—Ü–∏—Ñ—Ä). –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞: üòî",
        ProfileStates.AwaitingAutoLicensePlate,
        PROFILE_PROGRESS_STEPS,
        reply_markup=Keyboards.cancel_kb()
    )

@profile_router.message(ProfileStates.AwaitingAutoLicensePlate, F.text)
async def process_auto_license_plate(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Å–Ω–æ–º–µ—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –≥–æ—Å–Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
    try:
        license_plate = message.text.strip()
        data = await state.get_data()
        auto_input = AutoInput(
            brand=data["brand"],
            year=data["year"],
            vin=data["vin"],
            license_plate=license_plate
        )
        with Session() as session:
            user = session.query(User).filter_by(telegram_id=str(message.from_user.id)).first()
            auto = Auto(
                user_id=user.id,
                brand=auto_input.brand,
                year=auto_input.year,
                vin=auto_input.vin,
                license_plate=auto_input.license_plate
            )
            session.add(auto)
            session.commit()
            logger.info(f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            autos = session.query(Auto).filter_by(user_id=user.id).all()
            response = "<b>–ê–≤—Ç–æ–º–æ–±–∏–ª—å –¥–æ–±–∞–≤–ª–µ–Ω</b> üéâ\n\n"
            for auto in autos:
                response += (
                    f"ID: {auto.id}\n"
                    f"–ú–∞—Ä–∫–∞: {auto.brand}\n"
                    f"–ì–æ–¥: {auto.year}\n"
                    f"–ì–æ—Å–Ω–æ–º–µ—Ä: {auto.license_plate}\n\n"
                )
            sent_message = await send_message(
                bot, str(message.chat.id), "text",
                response,
                reply_markup=Keyboards.auto_management_kb(autos)
            )
            if sent_message:
                await state.update_data(last_message_id=sent_message.message_id)
                await state.set_state(ProfileStates.ManagingAutos)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è {message.from_user.id}: {str(e)}")
        sent_message = await send_message(
            bot, str(message.chat.id), "text",
            (await get_progress_bar(ProfileStates.AwaitingAutoLicensePlate, PROFILE_PROGRESS_STEPS,
                                    style="emoji")).format(
                message="–ì–æ—Å–Ω–æ–º–µ—Ä —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –¥–ª–∏–Ω–Ω—ã–π (5‚Äì20 —Å–∏–º–≤–æ–ª–æ–≤). –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞: üöò"
            ),
            reply_markup=Keyboards.cancel_kb()
        )
        if sent_message:
            await state.update_data(last_message_id=sent_message.message_id)

@profile_router.callback_query(ProfileStates.ManagingAutos, F.data.startswith("delete_auto_"))
async def delete_auto(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
    auto_id = int(callback.data.replace("delete_auto_", ""))
    try:
        with Session() as session:
            auto = session.query(Auto).get(auto_id)
            if not auto:
                logger.warning(f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å {auto_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
                await handle_error(callback, state, bot, "–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. üòî", "–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                                   Exception("Auto not found"))
                await callback.answer()
                return

            active_bookings = session.query(Booking).filter(
                Booking.auto_id == auto_id,
                Booking.status.in_([BookingStatus.PENDING, BookingStatus.CONFIRMED])
            ).all()
            if active_bookings:
                logger.warning(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å {auto_id}: –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏")
                sent_message = await send_message(
                    bot, str(callback.message.chat.id), "text",
                    "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å: –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏. –û—Ç–º–µ–Ω–∏—Ç–µ –∏—Ö –≤ '–ú–æ–∏ –∑–∞–ø–∏—Å–∏'. üìù",
                    reply_markup=Keyboards.auto_management_kb(
                        session.query(Auto).filter_by(user_id=auto.user_id).all()
                    )
                )
                if sent_message:
                    await state.update_data(last_message_id=sent_message.message_id)
                await callback.answer()
                return

            session.query(Booking).filter(
                Booking.auto_id == auto_id,
                Booking.status.in_([BookingStatus.REJECTED, BookingStatus.CANCELLED])
            ).delete()

            session.delete(auto)
            session.commit()
            logger.info(f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å {auto_id} —É–¥–∞–ª—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")

            autos = session.query(Auto).filter_by(user_id=auto.user_id).all()
            if not autos:
                response = "–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π: üöó"
                sent_message = await send_message(
                    bot, str(callback.message.chat.id), "text",
                    response,
                    reply_markup=Keyboards.profile_menu_kb()
                )
                if sent_message:
                    await state.update_data(last_message_id=sent_message.message_id)
                    await state.set_state(ProfileStates.MainMenu)
                await callback.answer()
                return

            response = "<b>–ê–≤—Ç–æ–º–æ–±–∏–ª—å —É–¥–∞–ª—ë–Ω</b> üóë\n\n"
            for auto in autos:
                response += (
                    f"ID: {auto.id}\n"
                    f"–ú–∞—Ä–∫–∞: {auto.brand}\n"
                    f"–ì–æ–¥: {auto.year}\n"
                    f"–ì–æ—Å–Ω–æ–º–µ—Ä: {auto.license_plate}\n\n"
                )
            sent_message = await send_message(
                bot, str(callback.message.chat.id), "text",
                response,
                reply_markup=Keyboards.auto_management_kb(autos)
            )
            if sent_message:
                await state.update_data(last_message_id=sent_message.message_id)
                await state.set_state(ProfileStates.ManagingAutos)
            await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è {callback.from_user.id}: {str(e)}")
        await handle_error(callback, state, bot, "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî", "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è", e)
        await callback.answer()

@profile_router.callback_query(ProfileStates.ManagingAutos, F.data == "back_to_profile")
async def back_to_profile(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –º–µ–Ω—é –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞")
    try:
        with Session() as session:
            user = session.query(User).filter_by(telegram_id=str(callback.from_user.id)).first()
            response = (
                f"<b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b> üë§\n"
                f"–ò–º—è: {user.first_name}\n"
                f"–§–∞–º–∏–ª–∏—è: {user.last_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {user.phone or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user.birth_date or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            )
            try:
                photo_path = get_photo_path("profile")
                sent_message = await send_message(
                    bot, str(callback.message.chat.id), "photo",
                    response,
                    photo=photo_path,
                    reply_markup=Keyboards.profile_menu_kb()
                )
            except FileNotFoundError as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è {callback.from_user.id}: {str(e)}")
                sent_message = await send_message(
                    bot, str(callback.message.chat.id), "text",
                    response,
                    reply_markup=Keyboards.profile_menu_kb()
                )
            if sent_message:
                await state.update_data(last_message_id=sent_message.message_id)
                await state.set_state(ProfileStates.MainMenu)
            await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è {callback.from_user.id}: {str(e)}")
        await handle_error(callback, state, bot, "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî", "–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", e)
        await callback.answer()

@profile_router.callback_query(ProfileStates.MainMenu, F.data == "my_bookings")
async def show_bookings(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ü–æ–∫–∞–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –æ—Ç–º–µ–Ω—ã."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏")
    try:
        with Session() as session:
            user = session.query(User).filter_by(telegram_id=str(callback.from_user.id)).first()
            bookings = session.query(Booking).filter(
                Booking.user_id == user.id,
                Booking.status.in_([BookingStatus.PENDING, BookingStatus.CONFIRMED])
            ).all()
            if not bookings:
                sent_message = await send_message(
                    bot, str(callback.message.chat.id), "text",
                    "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π. üìù",
                    reply_markup=Keyboards.profile_menu_kb()
                )
                if sent_message:
                    await state.update_data(last_message_id=sent_message.message_id)
                await state.set_state(ProfileStates.MainMenu)
                await callback.answer()
                return
            response = "<b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏</b> üìú\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω—ã:"
            try:
                photo_path = get_photo_path("bookings")
                sent_message = await send_message(
                    bot, str(callback.message.chat.id), "photo",
                    response,
                    photo=photo_path,
                    reply_markup=Keyboards.bookings_kb(bookings)
                )
            except FileNotFoundError as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ bookings –¥–ª—è {callback.from_user.id}: {str(e)}")
                sent_message = await send_message(
                    bot, str(callback.message.chat.id), "text",
                    response,
                    reply_markup=Keyboards.bookings_kb(bookings)
                )
            if sent_message:
                await state.update_data(last_message_id=sent_message.message_id)
                await state.set_state(ProfileStates.MainMenu)
            await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –¥–ª—è {callback.from_user.id}: {str(e)}")
        await handle_error(callback, state, bot, "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π", e)
        await callback.answer()

@profile_router.callback_query(ProfileStates.ViewingBooking, F.data == "my_bookings")
async def back_to_bookings(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–∏."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å–µ–π")
    try:
        with Session() as session:
            user = session.query(User).filter_by(telegram_id=str(callback.from_user.id)).first()
            bookings = session.query(Booking).filter(
                Booking.user_id == user.id,
                Booking.status.in_([BookingStatus.PENDING, BookingStatus.CONFIRMED])
            ).all()
            if not bookings:
                sent_message = await send_message(
                    bot, str(callback.message.chat.id), "text",
                    "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π. üìù",
                    reply_markup=Keyboards.profile_menu_kb()
                )
                if sent_message:
                    await state.update_data(last_message_id=sent_message.message_id)
                await state.set_state(ProfileStates.MainMenu)
                await callback.answer()
                return
            response = "<b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏</b> üìú\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω—ã:"
            try:
                photo_path = get_photo_path("bookings")
                sent_message = await send_message(
                    bot, str(callback.message.chat.id), "photo",
                    response,
                    photo=photo_path,
                    reply_markup=Keyboards.bookings_kb(bookings)
                )
            except FileNotFoundError as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ bookings –¥–ª—è {callback.from_user.id}: {str(e)}")
                sent_message = await send_message(
                    bot, str(callback.message.chat.id), "text",
                    response,
                    reply_markup=Keyboards.bookings_kb(bookings)
                )
            if sent_message:
                await state.update_data(last_message_id=sent_message.message_id)
                await state.set_state(ProfileStates.MainMenu)
            await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å–µ–π –¥–ª—è {callback.from_user.id}: {str(e)}")
        await handle_error(callback, state, bot, "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî", "–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å–µ–π", e)
        await callback.answer()

@profile_router.callback_query(F.data.startswith("view_booking_"))
async def view_booking(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å")
    booking_id = int(callback.data.replace("view_booking_", ""))
    try:
        with Session() as session:
            booking = session.query(Booking).get(booking_id)
            if not booking:
                sent_message = await send_message(
                    bot, str(callback.message.chat.id), "text",
                    "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. üìù",
                    reply_markup=Keyboards.profile_menu_kb()
                )
                if sent_message:
                    await state.update_data(last_message_id=sent_message.message_id)
                await state.set_state(ProfileStates.MainMenu)
                await callback.answer()
                return
            if str(callback.from_user.id) != str(booking.user.telegram_id):
                logger.warning(f"–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø: user_id={callback.from_user.id} != telegram_id={booking.user.telegram_id}")
                await callback.answer("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∑–∞–ø–∏—Å–∏. üîí")
                return
            auto = session.query(Auto).get(booking.auto_id)
            status_map = {
                BookingStatus.PENDING: "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚è≥",
                BookingStatus.CONFIRMED: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ ‚úÖ",
                BookingStatus.REJECTED: "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ ‚ùå",
                BookingStatus.CANCELLED: "–û—Ç–º–µ–Ω–µ–Ω–æ üö´"
            }
            response = (
                f"<b>–ó–∞–ø–∏—Å—å #{booking.id}</b> üìã\n"
                f"<b>–£—Å–ª—É–≥–∞:</b> {booking.service_name} üîß\n"
                f"<b>–î–∞—Ç–∞:</b> {booking.date.strftime('%d.%m.%Y')} üìÖ\n"
                f"<b>–í—Ä–µ–º—è:</b> {booking.time.strftime('%H:%M')} ‚è∞\n"
                f"<b>–ê–≤—Ç–æ:</b> {auto.brand}, {auto.year}, {auto.license_plate} üöó\n"
                f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_map[booking.status]}\n"
            )
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚¨Ö", callback_data="my_bookings")]
            ])
            if booking.status in [BookingStatus.PENDING, BookingStatus.CONFIRMED]:
                keyboard.inline_keyboard.insert(0, [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data=f"cancel_booking_{booking.id}")])
            try:
                photo_path = get_photo_path("booking_details")
                sent_message = await send_message(
                    bot, str(callback.message.chat.id), "photo",
                    response,
                    photo=photo_path,
                    reply_markup=keyboard
                )
            except FileNotFoundError as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ booking_details –¥–ª—è {callback.from_user.id}: {str(e)}")
                sent_message = await send_message(
                    bot, str(callback.message.chat.id), "text",
                    response,
                    reply_markup=keyboard
                )
            if sent_message:
                await state.update_data(last_message_id=sent_message.message_id)
                await state.set_state(ProfileStates.ViewingBooking)
            await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–∏ {booking_id} –¥–ª—è {callback.from_user.id}: {str(e)}")
        await handle_error(callback, state, bot, "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî", "–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–∏", e)
        await callback.answer()

@profile_router.callback_query(ProfileStates.MainMenu, F.data == "booking_history")
async def show_booking_history(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø–∏—Å–µ–π."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø–∏—Å–µ–π")
    try:
        with Session() as session:
            user = session.query(User).filter_by(telegram_id=str(callback.from_user.id)).first()
            bookings = session.query(Booking).filter(
                Booking.user_id == user.id,
                Booking.status.in_([BookingStatus.REJECTED, BookingStatus.CANCELLED])
            ).all()
            if not bookings:
                sent_message = await send_message(
                    bot, str(callback.message.chat.id), "text",
                    "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∏–ª–∏ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π. üìù",
                    reply_markup=Keyboards.profile_menu_kb()
                )
                if sent_message:
                    await state.update_data(last_message_id=sent_message.message_id)
                await state.set_state(ProfileStates.MainMenu)
                await callback.answer()
                return
            response = "<b>–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π</b> üìú\n\n"
            for booking in bookings:
                auto = session.query(Auto).get(booking.auto_id)
                status_map = {
                    BookingStatus.REJECTED: "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ ‚ùå",
                    BookingStatus.CANCELLED: "–û—Ç–º–µ–Ω–µ–Ω–æ üö´"
                }
                response += (
                    f"<b>–ó–∞–ø–∏—Å—å #{booking.id}</b>\n"
                    f"<b>–£—Å–ª—É–≥–∞:</b> {booking.service_name} üîß\n"
                    f"<b>–î–∞—Ç–∞:</b> {booking.date.strftime('%d.%m.%Y')} üìÖ\n"
                    f"<b>–í—Ä–µ–º—è:</b> {booking.time.strftime('%H:%M')} ‚è∞\n"
                    f"<b>–ê–≤—Ç–æ:</b> {auto.brand}, {auto.year}, {auto.license_plate} üöó\n"
                    f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_map[booking.status]}\n"
                )
                if booking.rejection_reason:
                    response += f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {booking.rejection_reason}\n"
                response += "\n"
            sent_message = await send_message(
                bot, str(callback.message.chat.id), "text",
                response,
                reply_markup=Keyboards.profile_menu_kb()
            )
            if sent_message:
                await state.update_data(last_message_id=sent_message.message_id)
                await state.set_state(ProfileStates.MainMenu)
            await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø–∏—Å–µ–π –¥–ª—è {callback.from_user.id}: {str(e)}")
        await handle_error(callback, state, bot, "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø–∏—Å–µ–π", e)
        await callback.answer()

@profile_router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    sent_message = await send_message(
        bot, str(callback.message.chat.id), "text",
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=Keyboards.main_menu_kb()
    )
    if sent_message:
        await state.update_data(last_message_id=sent_message.message_id)
    await state.clear()
    await callback.answer()