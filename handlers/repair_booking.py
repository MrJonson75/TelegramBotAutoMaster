from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from config import get_photo_path, ADMIN_ID
from keyboards.main_kb import Keyboards
from database import User, Auto, Booking, BookingStatus, Session
from datetime import datetime
import asyncio
import re
from .states import RepairBookingStates, REPAIR_PROGRESS_STEPS
from utils import (
    get_progress_bar, send_message, handle_error, check_user_and_autos,
    master_only, get_booking_context, send_booking_notification, set_user_state,
    notify_master, schedule_reminder, schedule_user_reminder, setup_logger, process_user_input
)

repair_booking_router = Router()
logger = setup_logger(__name__)

@repair_booking_router.message(F.text == "–ó–∞–ø–∏—Å—å –Ω–∞ —Ä–µ–º–æ–Ω—Ç")
async def start_repair_booking(message: Message, state: FSMContext, bot: Bot):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –∑–∞–ø–∏—Å—å –Ω–∞ —Ä–µ–º–æ–Ω—Ç")
    try:
        with Session() as session:
            user, autos = await check_user_and_autos(session, str(message.from_user.id), bot, message, state, "booking_repair")
            if not user:
                logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                return
            if autos:
                response = (await get_progress_bar(RepairBookingStates.AwaitingAuto, REPAIR_PROGRESS_STEPS, style="emoji")).format(
                    message="–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç: üöó"
                )
                try:
                    sent_message = await send_message(
                        bot, str(message.chat.id), "photo",
                        response,
                        photo=get_photo_path("booking"),
                        reply_markup=Keyboards.auto_selection_kb(autos)
                    )
                except FileNotFoundError as e:
                    logger.error(f"–§–æ—Ç–æ booking –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {str(e)}. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                    sent_message = await send_message(
                        bot, str(message.chat.id), "text",
                        response,
                        reply_markup=Keyboards.auto_selection_kb(autos)
                    )
                if sent_message:
                    await state.update_data(last_message_id=sent_message.message_id)
                    await state.set_state(RepairBookingStates.AwaitingAuto)
            else:
                sent_message = await send_message(
                    bot, str(message.chat.id), "text",
                    "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π. –î–æ–±–∞–≤—å—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ. üöó",
                    reply_markup=Keyboards.profile_menu_kb()
                )
                if sent_message:
                    await state.update_data(last_message_id=sent_message.message_id)
                await state.clear()
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ start_repair_booking –¥–ª—è user_id={message.from_user.id}: {str(e)}")
        await handle_error(message, state, bot,
                           "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî",
                           "–û—à–∏–±–∫–∞ –≤ start_repair_booking", e)

@repair_booking_router.callback_query(RepairBookingStates.AwaitingAuto, F.data.startswith("auto_"))
async def process_auto_selection(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è."""
    auto_id = int(callback.data.replace("auto_", ""))
    try:
        with Session() as session:
            auto = session.query(Auto).get(auto_id)
            if not auto:
                await handle_error(callback, state, bot,
                                   "–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üöó",
                                   f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è auto_id={auto_id}",
                                   Exception("–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"))
                await callback.answer()
                return
            await state.update_data(auto_id=auto_id, photos=[])
            response = (await get_progress_bar(RepairBookingStates.AwaitingProblemDescription, REPAIR_PROGRESS_STEPS, style="emoji")).format(
                message="–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—Å—Ç—É–∫ –≤ –ø–æ–¥–≤–µ—Å–∫–µ'): üîß"
            )
            try:
                sent_message = await send_message(
                    bot, str(callback.message.chat.id), "photo",
                    response,
                    photo=get_photo_path("repair_description")
                )
            except FileNotFoundError as e:
                logger.error(f"–§–æ—Ç–æ repair_description –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {str(e)}. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                sent_message = await send_message(
                    bot, str(callback.message.chat.id), "text",
                    response
                )
            if sent_message:
                await state.update_data(last_message_id=sent_message.message_id)
                await state.set_state(RepairBookingStates.AwaitingProblemDescription)
            await callback.answer()
    except Exception as e:
        await handle_error(callback, state, bot,
                           "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî",
                           "–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è", e)
        await callback.answer()

@repair_booking_router.message(RepairBookingStates.AwaitingProblemDescription, F.text)
async def process_problem_description(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã."""
    def validate_description(text: str) -> str:
        text = text.strip()
        if len(text) < 5:
            raise ValueError("–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ")
        if len(text) > 500:
            raise ValueError("–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ")
        return text

    await process_user_input(
        message, state, bot,
        validate_description, "problem_description",
        "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ üì∏ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥.",
        "–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 5 –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: üîß",
        RepairBookingStates.AwaitingPhotos,
        REPAIR_PROGRESS_STEPS,
        reply_markup=Keyboards.photo_upload_kb()
    )

@repair_booking_router.message(RepairBookingStates.AwaitingPhotos, F.photo)
async def process_photo_upload(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π."""
    data = await state.get_data()
    photos = data.get("photos", [])
    if len(photos) >= 3:
        sent_message = await send_message(
            bot, str(message.chat.id), "text",
            (await get_progress_bar(RepairBookingStates.AwaitingPhotos, REPAIR_PROGRESS_STEPS, style="emoji")).format(
                message="–ú–∞–∫—Å–∏–º—É–º 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ù–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' –∏–ª–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'. üì∏"
            ),
            reply_markup=Keyboards.photo_upload_kb()
        )
        if sent_message:
            await state.update_data(last_message_id=sent_message.message_id)
        return
    photos.append(message.photo[-1].file_id)
    await state.update_data(photos=photos)
    remaining = 3 - len(photos)
    sent_message = await send_message(
        bot, str(message.chat.id), "text",
        (await get_progress_bar(RepairBookingStates.AwaitingPhotos, REPAIR_PROGRESS_STEPS, style="emoji")).format(
            message=f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞! –û—Å—Ç–∞–ª–æ—Å—å {remaining} —Ñ–æ—Ç–æ. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'/'–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'. üì∏"
        ),
        reply_markup=Keyboards.photo_upload_kb()
    )
    if sent_message:
        await state.update_data(last_message_id=sent_message.message_id)

@repair_booking_router.callback_query(RepairBookingStates.AwaitingPhotos, F.data == "photos_ready")
async def photos_ready(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π."""
    await state.update_data(service_name="–†–µ–º–æ–Ω—Ç", service_duration=60, week_offset=0)
    response = (await get_progress_bar(RepairBookingStates.AwaitingDate, REPAIR_PROGRESS_STEPS, style="emoji")).format(
        message="–í—ã–±–µ—Ä–∏—Ç–µ <b>–¥–∞—Ç—É</b> –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç: üìÖ"
    )
    sent_message = await send_message(
        bot, str(callback.message.chat.id), "text",
        response,
        reply_markup=Keyboards.calendar_kb()
    )
    if sent_message:
        await state.update_data(last_message_id=sent_message.message_id)
        await state.set_state(RepairBookingStates.AwaitingDate)
    await callback.answer()

@repair_booking_router.callback_query(RepairBookingStates.AwaitingPhotos, F.data == "skip_photos")
async def skip_photos(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π."""
    await state.update_data(photos=[], service_name="–†–µ–º–æ–Ω—Ç", service_duration=60, week_offset=0)
    response = (await get_progress_bar(RepairBookingStates.AwaitingDate, REPAIR_PROGRESS_STEPS, style="emoji")).format(
        message="–í—ã–±–µ—Ä–∏—Ç–µ <b>–¥–∞—Ç—É</b> –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç: üìÖ"
    )
    sent_message = await send_message(
        bot, str(callback.message.chat.id), "text",
        response,
        reply_markup=Keyboards.calendar_kb()
    )
    if sent_message:
        await state.update_data(last_message_id=sent_message.message_id)
        await state.set_state(RepairBookingStates.AwaitingDate)
    await callback.answer()

@repair_booking_router.callback_query(F.data == "cancel")
async def cancel_action(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    sent_message = await send_message(
        bot, str(callback.message.chat.id), "text",
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. ‚ùå",
        reply_markup=Keyboards.main_menu_kb()
    )
    if sent_message:
        await state.update_data(last_message_id=sent_message.message_id)
    await state.clear()
    await callback.answer()

@repair_booking_router.callback_query(RepairBookingStates.AwaitingDate, F.data.startswith("prev_week_"))
async def prev_week_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –Ω–µ–¥–µ–ª—é."""
    week_offset = int(callback.data.replace("prev_week_", ""))
    data = await state.get_data()
    selected_date = data.get("selected_date")
    await state.update_data(week_offset=week_offset)
    await callback.message.edit_reply_markup(
        reply_markup=Keyboards.calendar_kb(selected_date, week_offset)
    )
    await callback.answer()

@repair_booking_router.callback_query(RepairBookingStates.AwaitingDate, F.data.startswith("next_week_"))
async def next_week_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é."""
    week_offset = int(callback.data.replace("next_week_", ""))
    data = await state.get_data()
    selected_date = data.get("selected_date")
    await state.update_data(week_offset=week_offset)
    await callback.message.edit_reply_markup(
        reply_markup=Keyboards.calendar_kb(selected_date, week_offset)
    )
    await callback.answer()

@repair_booking_router.callback_query(RepairBookingStates.AwaitingDate, F.data == "today")
async def today_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è."""
    await state.update_data(week_offset=0)
    data = await state.get_data()
    selected_date = data.get("selected_date")
    await callback.message.edit_reply_markup(
        reply_markup=Keyboards.calendar_kb(selected_date, 0)
    )
    await callback.answer()

@repair_booking_router.callback_query(RepairBookingStates.AwaitingDate, F.data.startswith("date_"))
async def process_date_selection(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã."""
    date_str = callback.data.replace("date_", "")
    try:
        selected_date = datetime.strptime(date_str, "%Y-%m-%d")
        data = await state.get_data()
        week_offset = data.get("week_offset", 0)
        with Session() as session:
            time_slots = Keyboards.time_slots_kb(selected_date, data["service_duration"], session)
            if not time_slots.inline_keyboard:
                sent_message = await send_message(
                    bot, str(callback.message.chat.id), "text",
                    (await get_progress_bar(RepairBookingStates.AwaitingDate, REPAIR_PROGRESS_STEPS, style="emoji")).format(
                        message="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É: üìÖ"
                    ),
                    reply_markup=Keyboards.calendar_kb(selected_date, week_offset)
                )
                if sent_message:
                    await state.update_data(last_message_id=sent_message.message_id)
                await callback.answer()
                return
            await state.update_data(selected_date=selected_date, time_offset=0)
            sent_message = await send_message(
                bot, str(callback.message.chat.id), "text",
                (await get_progress_bar(RepairBookingStates.AwaitingTime, REPAIR_PROGRESS_STEPS, style="emoji")).format(
                    message="–í—ã–±–µ—Ä–∏—Ç–µ <b>–≤—Ä–µ–º—è</b> –¥–ª—è –∑–∞–ø–∏—Å–∏: ‚è∞"
                ),
                reply_markup=time_slots
            )
            if sent_message:
                await state.update_data(last_message_id=sent_message.message_id)
                await state.set_state(RepairBookingStates.AwaitingTime)
            await callback.answer()
    except ValueError:
        data = await state.get_data()
        week_offset = data.get("week_offset", 0)
        sent_message = await send_message(
            bot, str(callback.message.chat.id), "text",
            (await get_progress_bar(RepairBookingStates.AwaitingDate, REPAIR_PROGRESS_STEPS, style="emoji")).format(
                message="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞: üìÖ"
            ),
            reply_markup=Keyboards.calendar_kb(week_offset=week_offset)
        )
        if sent_message:
            await state.update_data(last_message_id=sent_message.message_id)
        await callback.answer()

@repair_booking_router.callback_query(RepairBookingStates.AwaitingTime, F.data.startswith("prev_slots_"))
async def prev_slots_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–ª–æ—Ç–∞–º."""
    time_offset = int(callback.data.replace("prev_slots_", ""))
    data = await state.get_data()
    selected_date = data.get("selected_date")
    service_duration = data.get("service_duration")
    await state.update_data(time_offset=time_offset)
    with Session() as session:
        await callback.message.edit_reply_markup(
            reply_markup=Keyboards.time_slots_kb(selected_date, service_duration, session, time_offset)
        )
    await callback.answer()

@repair_booking_router.callback_query(RepairBookingStates.AwaitingTime, F.data.startswith("next_slots_"))
async def next_slots_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–ª–æ—Ç–∞–º."""
    time_offset = int(callback.data.replace("next_slots_", ""))
    data = await state.get_data()
    selected_date = data.get("selected_date")
    service_duration = data.get("service_duration")
    await state.update_data(time_offset=time_offset)
    with Session() as session:
        await callback.message.edit_reply_markup(
            reply_markup=Keyboards.time_slots_kb(selected_date, service_duration, session, time_offset)
        )
    await callback.answer()

@repair_booking_router.callback_query(RepairBookingStates.AwaitingTime, F.data.startswith("time_"))
async def process_time_selection(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å."""
    time_str = callback.data.replace("time_", "")
    try:
        selected_time = datetime.strptime(time_str, "%H:%M").time()
        data = await state.get_data()
        photos = data.get("photos", [])
        with Session() as session:
            user = session.query(User).filter_by(telegram_id=str(callback.from_user.id)).first()
            auto = session.query(Auto).get(data["auto_id"])
            if not auto:
                await handle_error(callback, state, bot,
                                   "–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ. üöó",
                                   f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è auto_id={data['auto_id']}",
                                   Exception("–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"))
                await callback.answer()
                return
            booking = Booking(
                user_id=user.id,
                auto_id=data["auto_id"],
                service_name="–†–µ–º–æ–Ω—Ç",
                problem_description=data.get("problem_description", ""),
                photo1=photos[0] if photos else None,
                photo2=photos[1] if len(photos) > 1 else None,
                photo3=photos[2] if len(photos) > 2 else None,
                date=data["selected_date"].date(),
                time=selected_time,
                status=BookingStatus.PENDING
            )
            session.add(booking)
            session.commit()
            logger.info(f"–ó–∞–ø–∏—Å—å –Ω–∞ —Ä–µ–º–æ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∞: booking_id={booking.id}, user_id={callback.from_user.id}")
            notification_text = (
                f"–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ —Ä–µ–º–æ–Ω—Ç #{booking.id} –æ–∂–∏–¥–∞–µ—Ç –æ—Ü–µ–Ω–∫–∏: üìù\n"
                f"<b>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:</b> {data.get('problem_description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"<b>–ê–≤—Ç–æ:</b> {auto.brand}, {auto.year}, {auto.license_plate}\n"
                f"<b>–î–∞—Ç–∞:</b> {booking.date.strftime('%d.%m.%Y')}\n"
                f"<b>–í—Ä–µ–º—è:</b> {booking.time.strftime('%H:%M')}"
            )
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="–û—Ü–µ–Ω–∏—Ç—å —Ä–µ–º–æ–Ω—Ç üîß", callback_data=f"evaluate_booking_{booking.id}"),
                InlineKeyboardButton(text="–û—Ç–∫–∞–∑–∞—Ç—å—Å—è ‚ùå", callback_data=f"reject_booking_{booking.id}")
            ]])
            success = await send_message(
                bot, ADMIN_ID, "text",
                notification_text,
                reply_markup=keyboard
            )
            if not success:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞ –æ –∑–∞–ø–∏—Å–∏ booking_id={booking.id}, user_id={callback.from_user.id}")
            if photos:
                for i, photo_id in enumerate(photos, 1):
                    await bot.send_photo(
                        chat_id=ADMIN_ID,
                        photo=photo_id,
                        caption=f"–§–æ—Ç–æ {i} –¥–ª—è –∑–∞–ø–∏—Å–∏ #{booking.id}"
                    )
            sent_message = await send_message(
                bot, str(callback.message.chat.id), "text",
                f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–º–æ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–∞—Å—Ç–µ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ü–µ–Ω–∫–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏. ‚è≥\n"
                f"<b>–ü—Ä–æ–±–ª–µ–º–∞:</b> {data.get('problem_description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} üîß",
                reply_markup=Keyboards.main_menu_kb()
            )
            if sent_message:
                await state.update_data(last_message_id=sent_message.message_id)
            await state.clear()
            await callback.answer()
    except Exception as e:
        await handle_error(callback, state, bot,
                           "–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî",
                           f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç booking_id={booking.id if 'booking' in locals() else 'unknown'}", e)
        await callback.answer()

@repair_booking_router.callback_query(F.data.startswith("evaluate_booking_"))
@master_only
async def evaluate_booking(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ú–∞—Å—Ç–µ—Ä –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –≤—Ä–µ–º—è —Ä–µ–º–æ–Ω—Ç–∞."""
    booking_id = int(callback.data.replace("evaluate_booking_", ""))
    try:
        with Session() as session:
            booking, _, _ = await get_booking_context(session, booking_id, bot, callback, state)
            if not booking:
                await callback.answer()
                return
        await state.update_data(booking_id=booking_id, master_action="evaluate")
        sent_message = await send_message(
            bot, str(callback.message.chat.id), "text",
            "–í–≤–µ–¥–∏—Ç–µ <b>—Å—Ç–æ–∏–º–æ—Å—Ç—å</b> —Ä–µ–º–æ–Ω—Ç–∞ (–≤ —Ä—É–±–ª—è—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä, 5000) –∏ <b>–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</b> (–≤ —á–∞—Å–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä, 2): ‚è∞\n"
            "–§–æ—Ä–º–∞—Ç: <b>5000 2</b>"
        )
        if sent_message:
            await state.update_data(last_message_id=sent_message.message_id)
            await state.set_state(RepairBookingStates.AwaitingMasterEvaluation)
        await callback.answer()
    except Exception as e:
        await handle_error(callback, state, bot,
                           "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî",
                           f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∑–∞–ø–∏—Å–∏ booking_id={booking_id}", e)
        await callback.answer()

@repair_booking_router.message(RepairBookingStates.AwaitingMasterEvaluation, F.text)
@master_only
async def process_master_evaluation(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–∞—Å—Ç–µ—Ä–æ–º."""
    data = await state.get_data()
    booking_id = data.get("booking_id")
    if not booking_id or data.get("master_action") != "evaluate":
        await handle_error(message, state, bot,
                           "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî",
                           "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM", Exception("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è"))
        return
    try:
        cost, hours = map(float, message.text.strip().split())
        if cost < 0 or hours <= 0:
            raise ValueError("–°—Ç–æ–∏–º–æ—Å—Ç—å –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏")
        duration = int(hours * 60)  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —á–∞—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—ã
        with Session() as session:
            booking, _, _ = await get_booking_context(session, booking_id, bot, message, state)
            if not booking:
                return
            await state.update_data(cost=cost, duration=duration)
            sent_message = await send_message(
                bot, str(message.chat.id), "text",
                f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: {booking.time.strftime('%H:%M')}. –•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è? ‚è∞",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è ‚úÖ", callback_data=f"keep_time_{booking_id}")],
                    [InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è ‚è∞", callback_data=f"change_time_{booking_id}")]
                ])
            )
            if sent_message:
                await state.update_data(last_message_id=sent_message.message_id)
            await state.set_state(RepairBookingStates.AwaitingMasterTimeSelection)
    except ValueError as e:
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–ª—è booking_id={booking_id}: {str(e)}")
        sent_message = await send_message(
            bot, str(message.chat.id), "text",
            "–û—à–∏–±–∫–∞: —Ñ–æ—Ä–º–∞—Ç '—Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å' (–Ω–∞–ø—Ä–∏–º–µ—Ä, '5000 2'). –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥: ‚è∞"
        )
        if sent_message:
            await state.update_data(last_message_id=sent_message.message_id)
    except Exception as e:
        await handle_error(message, state, bot,
                           "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî",
                           f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è booking_id={booking_id}", e)

@repair_booking_router.callback_query(RepairBookingStates.AwaitingMasterTimeSelection, F.data.startswith("keep_time_"))
@master_only
async def keep_time(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ú–∞—Å—Ç–µ—Ä –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è."""
    booking_id = int(callback.data.replace("keep_time_", ""))
    try:
        data = await state.get_data()
        cost = data.get("cost")
        duration = data.get("duration")
        with Session() as session:
            booking, user, auto = await get_booking_context(session, booking_id, bot, callback, state)
            if not booking:
                await callback.answer()
                return
            booking.cost = cost
            booking.service_duration = duration
            session.commit()
            notification_text = (
                f"–ú–∞—Å—Ç–µ—Ä –æ—Ü–µ–Ω–∏–ª —Ä–µ–º–æ–Ω—Ç #{booking_id}:\n"
                f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {cost:.2f} —Ä—É–±.\n"
                f"<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {duration // 60} —á.\n"
                f"<b>–î–∞—Ç–∞:</b> {booking.date.strftime('%d.%m.%Y')}\n"
                f"<b>–í—Ä–µ–º—è:</b> {booking.time.strftime('%H:%M')}\n"
                f"<b>–ü—Ä–æ–±–ª–µ–º–∞:</b> {booking.problem_description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}"
            )
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data=f"confirm_booking_{booking_id}"),
                InlineKeyboardButton(text="–û—Ç–∫–∞–∑–∞—Ç—å—Å—è ‚ùå", callback_data=f"reject_booking_{booking_id}")
            ]])
            success = await send_booking_notification(
                bot, user.telegram_id, booking, user, auto,
                notification_text,
                keyboard
            )
            if not success:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –æ—Ü–µ–Ω–∫–µ booking_id={booking_id}, user_id={user.telegram_id}")
            sent_message = await send_message(
                bot, str(callback.message.chat.id), "text",
                f"–û—Ü–µ–Ω–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {cost:.2f} —Ä—É–±., {duration // 60} —á. –û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. ‚è≥"
            )
            if sent_message:
                await state.update_data(last_message_id=sent_message.message_id)
            await state.clear()
        await callback.answer()
    except Exception as e:
        await handle_error(callback, state, bot,
                           "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî",
                           f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è booking_id={booking_id}", e)
        await callback.answer()

@repair_booking_router.callback_query(RepairBookingStates.AwaitingMasterTimeSelection, F.data.startswith("change_time_"))
@master_only
async def change_time(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ú–∞—Å—Ç–µ—Ä –≤—ã–±–∏—Ä–∞–µ—Ç –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è."""
    booking_id = int(callback.data.replace("change_time_", ""))
    try:
        sent_message = await send_message(
            bot, str(callback.message.chat.id), "text",
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ <b>–≤—Ä–µ–º—è</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, <b>14:30</b>): ‚è∞"
        )
        if sent_message:
            await state.update_data(last_message_id=sent_message.message_id)
            await state.set_state(RepairBookingStates.AwaitingMasterTime)
        await callback.answer()
    except Exception as e:
        await handle_error(callback, state, bot,
                           "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî",
                           f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è booking_id={booking_id}", e)
        await callback.answer()

@repair_booking_router.message(RepairBookingStates.AwaitingMasterTime, F.text)
@master_only
async def process_master_time(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –º–∞—Å—Ç–µ—Ä–æ–º."""
    data = await state.get_data()
    booking_id = data.get("booking_id")
    cost = data.get("cost")
    duration = data.get("duration")
    if not booking_id or data.get("master_action") != "evaluate":
        await handle_error(message, state, bot,
                           "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî",
                           "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM", Exception("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è"))
        return
    time_str = message.text.strip()
    if not re.match(r"^(?:[01]\d|2[0-3]):[0-5]\d$", time_str):
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ '{time_str}' –¥–ª—è booking_id={booking_id}")
        sent_message = await send_message(
            bot, str(message.chat.id), "text",
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, <b>14:30</b>): ‚è∞"
        )
        if sent_message:
            await state.update_data(last_message_id=sent_message.message_id)
        return
    try:
        with Session() as session:
            booking, user, auto = await get_booking_context(session, booking_id, bot, message, state)
            if not booking:
                return
            new_time = datetime.strptime(time_str, "%H:%M").time()
            booking.time = new_time
            booking.cost = cost
            booking.service_duration = duration
            session.commit()
            notification_text = (
                f"–ú–∞—Å—Ç–µ—Ä –æ—Ü–µ–Ω–∏–ª —Ä–µ–º–æ–Ω—Ç #{booking_id}:\n"
                f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {cost:.2f} —Ä—É–±.\n"
                f"<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {duration // 60} —á.\n"
                f"<b>–î–∞—Ç–∞:</b> {booking.date.strftime('%d.%m.%Y')}\n"
                f"<b>–í—Ä–µ–º—è:</b> {booking.time.strftime('%H:%M')}\n"
                f"<b>–ü—Ä–æ–±–ª–µ–º–∞:</b> {booking.problem_description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}"
            )
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data=f"confirm_booking_{booking_id}"),
                InlineKeyboardButton(text="–û—Ç–∫–∞–∑–∞—Ç—å—Å—è ‚ùå", callback_data=f"reject_booking_{booking_id}")
            ]])
            success = await send_booking_notification(
                bot, user.telegram_id, booking, user, auto,
                notification_text,
                keyboard
            )
            if not success:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–æ–≤–æ–º –≤—Ä–µ–º–µ–Ω–∏ booking_id={booking_id}, user_id={user.telegram_id}")
            sent_message = await send_message(
                bot, str(message.chat.id), "text",
                f"–û—Ü–µ–Ω–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {cost:.2f} —Ä—É–±., {duration // 60} —á., –≤—Ä–µ–º—è {new_time.strftime('%H:%M')}. –û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. ‚è≥"
            )
            if sent_message:
                await state.update_data(last_message_id=sent_message.message_id)
            await state.clear()
    except Exception as e:
        await handle_error(message, state, bot,
                           "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî",
                           f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è booking_id={booking_id}", e)

@repair_booking_router.callback_query(F.data.startswith("reject_booking_"))
@master_only
async def reject_booking(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ú–∞—Å—Ç–µ—Ä –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ—Ç —Ä–µ–º–æ–Ω—Ç–∞."""
    booking_id = int(callback.data.replace("reject_booking_", ""))
    try:
        with Session() as session:
            booking, _, _ = await get_booking_context(session, booking_id, bot, callback, state)
            if not booking:
                await callback.answer()
                return
        await state.update_data(booking_id=booking_id, master_action="reject")
        sent_message = await send_message(
            bot, str(callback.message.chat.id), "text",
            "–£–∫–∞–∂–∏—Ç–µ <b>–ø—Ä–∏—á–∏–Ω—É</b> –æ—Ç–∫–∞–∑–∞ –æ—Ç —Ä–µ–º–æ–Ω—Ç–∞: üìù"
        )
        if sent_message:
            await state.update_data(last_message_id=sent_message.message_id)
            await state.set_state(RepairBookingStates.AwaitingMasterRejectionReason)
        await callback.answer()
    except Exception as e:
        await handle_error(callback, state, bot,
                           "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî",
                           f"–û—à–∏–±–∫–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç –∑–∞–ø–∏—Å–∏ booking_id={booking_id}", e)
        await callback.answer()

@repair_booking_router.message(RepairBookingStates.AwaitingMasterRejectionReason, F.text)
@master_only
async def process_master_rejection(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ –º–∞—Å—Ç–µ—Ä–∞."""
    data = await state.get_data()
    booking_id = data.get("booking_id")
    if not booking_id or data.get("master_action") != "reject":
        await handle_error(message, state, bot,
                           "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî",
                           "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM", Exception("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è"))
        return
    rejection_reason = message.text.strip()
    if len(rejection_reason) < 5:
        sent_message = await send_message(
            bot, str(message.chat.id), "text",
            "–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. –£–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ: üìù"
        )
        if sent_message:
            await state.update_data(last_message_id=sent_message.message_id)
        return
    try:
        with Session() as session:
            booking, user, auto = await get_booking_context(session, booking_id, bot, message, state)
            if not booking:
                return
            booking.status = BookingStatus.REJECTED
            booking.rejection_reason = rejection_reason
            session.commit()
            success = await send_booking_notification(
                bot, user.telegram_id, booking, user, auto,
                f"–ú–∞—Å—Ç–µ—Ä –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —Ä–µ–º–æ–Ω—Ç–∞:\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {rejection_reason} ‚ùå"
            )
            if not success:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–∞–∑–µ booking_id={booking_id}, user_id={user.telegram_id}")
            sent_message = await send_message(
                bot, str(message.chat.id), "text",
                f"–û—Ç–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {rejection_reason}. ‚ùå"
            )
            if sent_message:
                await state.update_data(last_message_id=sent_message.message_id)
            await state.clear()
    except Exception as e:
        await handle_error(message, state, bot,
                           "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî",
                           f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫–∞–∑–∞ –¥–ª—è booking_id={booking_id}", e)

@repair_booking_router.callback_query(F.data.startswith("confirm_booking_"))
async def confirm_booking(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å."""
    booking_id = int(callback.data.replace("confirm_booking_", ""))
    try:
        with Session() as session:
            booking, user, auto = await get_booking_context(session, booking_id, bot, callback, state)
            if not booking:
                await callback.answer()
                return
            if str(callback.from_user.id) != str(booking.user.telegram_id):
                logger.warning(f"–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø: user_id={callback.from_user.id} != telegram_id={booking.user.telegram_id}")
                await callback.answer("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∑–∞–ø–∏—Å–∏. üîí")
                return
            booking.status = BookingStatus.CONFIRMED
            session.commit()
            cost = booking.cost or 0
            duration = booking.service_duration or 60
            notification_text = (
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} {user.last_name} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–ø–∏—Å—å –Ω–∞ —Ä–µ–º–æ–Ω—Ç #{booking_id}: ‚úÖ\n"
                f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {cost:.2f} —Ä—É–±.\n"
                f"<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {duration // 60} —á."
            )
            success = await send_booking_notification(
                bot, ADMIN_ID, booking, user, auto,
                notification_text
            )
            if not success:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ booking_id={booking_id}, user_id={user.telegram_id}")
            sent_message = await send_message(
                bot, str(callback.message.chat.id), "text",
                f"–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞ —Ä–µ–º–æ–Ω—Ç: ‚úÖ\n"
                f"<b>–£—Å–ª—É–≥–∞:</b> –†–µ–º–æ–Ω—Ç üîß\n"
                f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {cost:.2f} —Ä—É–±.\n"
                f"<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {duration // 60} —á.\n"
                f"<b>–î–∞—Ç–∞:</b> {booking.date.strftime('%d.%m.%Y')} üìÖ\n"
                f"<b>–í—Ä–µ–º—è:</b> {booking.time.strftime('%H:%M')} ‚è∞\n"
                f"<b>–ê–≤—Ç–æ:</b> {auto.brand}, {auto.year}, {auto.license_plate} üöó",
                reply_markup=Keyboards.main_menu_kb()
            )
            if sent_message:
                await state.update_data(last_message_id=sent_message.message_id)
            asyncio.create_task(schedule_reminder(bot, booking, user, auto))
            asyncio.create_task(schedule_user_reminder(bot, booking, user, auto))
            await callback.answer("–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. ‚úÖ")
            await state.clear()
    except Exception as e:
        await handle_error(callback, state, bot,
                           "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî",
                           f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –¥–ª—è booking_id={booking_id}", e)
        await callback.answer()

@repair_booking_router.callback_query(F.data.startswith("reject_booking_"))
async def reject_booking_user(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å."""
    booking_id = int(callback.data.replace("reject_booking_", ""))
    try:
        with Session() as session:
            booking, user, auto = await get_booking_context(session, booking_id, bot, callback, state)
            if not booking:
                await callback.answer()
                return
            if str(callback.from_user.id) != str(booking.user.telegram_id):
                logger.warning(f"–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø: user_id={callback.from_user.id} != telegram_id={booking.user.telegram_id}")
                await callback.answer("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∑–∞–ø–∏—Å–∏. üîí")
                return
            booking.status = BookingStatus.REJECTED
            booking.rejection_reason = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–ø–∏—Å—å"
            session.commit()
            cost = booking.cost or 0
            duration = booking.service_duration or 60
            success = await send_booking_notification(
                bot, ADMIN_ID, booking, user, auto,
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} {user.last_name} –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–ø–∏—Å—å –Ω–∞ —Ä–µ–º–æ–Ω—Ç #{booking_id}:\n"
                f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–ø–∏—Å—å ‚ùå\n"
                f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {cost:.2f} —Ä—É–±.\n"
                f"<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {duration} –º–∏–Ω."
            )
            if not success:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ booking_id={booking_id}, user_id={user.telegram_id}")
            sent_message = await send_message(
                bot, str(callback.message.chat.id), "text",
                f"–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞ —Ä–µ–º–æ–Ω—Ç: ‚ùå\n"
                f"<b>–£—Å–ª—É–≥–∞:</b> –†–µ–º–æ–Ω—Ç üîß\n"
                f"<b>–î–∞—Ç–∞:</b> {booking.date.strftime('%d.%m.%Y')} üìÖ\n"
                f"<b>–í—Ä–µ–º—è:</b> {booking.time.strftime('%H:%M')} ‚è∞\n"
                f"<b>–ê–≤—Ç–æ:</b> {auto.brand}, {auto.year}, {auto.license_plate} üöó",
                reply_markup=Keyboards.main_menu_kb()
            )
            if sent_message:
                await state.update_data(last_message_id=sent_message.message_id)
            await callback.answer("–ó–∞–ø–∏—Å—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. ‚ùå")
            await state.clear()
    except Exception as e:
        await handle_error(callback, state, bot,
            "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî",
            f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ booking_id={booking_id}", e)
        await callback.answer()