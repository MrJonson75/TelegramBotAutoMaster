from typing import Optional

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from config import get_photo_path, REMINDER_TIME_MINUTES, ADMIN_ID
from database import Session, User, Auto, Booking, BookingStatus
from keyboards.main_kb import Keyboards
from datetime import datetime
from utils import setup_logger
from .service_utils import (
    get_progress_bar, send_message, handle_error,
    check_user_and_autos, notify_master, schedule_reminder, schedule_user_reminder,
    master_only, get_booking_context, send_booking_notification
)
from .states import RepairBookingStates, REPAIR_PROGRESS_STEPS
from .reminder_manager import reminder_manager
import asyncio
import re

logger = setup_logger(__name__)

repair_booking_router = Router()

async def send_state_message(
    bot: Bot,
    chat_id: str,
    state: FSMContext,
    next_state: RepairBookingStates,
    message: str,
    photo_key: Optional[str] = None,
    reply_markup: Optional[InlineKeyboardMarkup] = None
) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
    sent_message = await send_message(
        bot, chat_id, "photo" if photo_key else "text",
        (await get_progress_bar(next_state, REPAIR_PROGRESS_STEPS, style="emoji")).format(message=message),
        photo_path=get_photo_path(photo_key) if photo_key else None,
        reply_markup=reply_markup
    )
    if sent_message:
        await state.update_data(last_message_id=sent_message.message_id)
        await state.set_state(next_state)
        logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {next_state}")
        return True
    return False

@repair_booking_router.message(F.text == "–ó–∞–ø–∏—Å—å –Ω–∞ —Ä–µ–º–æ–Ω—Ç")
async def start_repair_booking(message: Message, state: FSMContext, bot: Bot):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –∑–∞–ø–∏—Å—å –Ω–∞ —Ä–µ–º–æ–Ω—Ç")
    try:
        with Session() as session:
            user, autos = await check_user_and_autos(session, str(message.from_user.id), bot, message, state, "booking_repair")
            if user:
                if autos:
                    await send_state_message(
                        bot, str(message.chat.id), state,
                        RepairBookingStates.AwaitingAuto,
                        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞: üöó",
                        "booking_repair",
                        Keyboards.auto_selection_kb(autos)
                    )
                else:
                    sent_message = await send_message(
                        bot, str(message.chat.id), "text",
                        "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π. –î–æ–±–∞–≤—å—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ. üöó",
                        reply_markup=Keyboards.main_menu_kb()
                    )
                    if sent_message:
                        await state.update_data(last_message_id=sent_message.message_id)
                    await state.clear()
    except Exception as e:
        await handle_error(message, state, bot, "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî", "–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç", e)

@repair_booking_router.callback_query(RepairBookingStates.AwaitingAuto, F.data.startswith("auto_"))
async def process_auto_selection(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è."""
    auto_id = int(callback.data.replace("auto_", ""))
    try:
        with Session() as session:
            auto = session.query(Auto).get(auto_id)
            if not auto:
                await handle_error(
                    callback, state, bot,
                    "–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üöó",
                    f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è auto_id={auto_id}",
                    Exception("–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                )
                await callback.answer()
                return
        await state.update_data(auto_id=auto_id)
        success = await send_state_message(
            bot, str(callback.message.chat.id), state,
            RepairBookingStates.AwaitingDescription,
            "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, <b>—Å—Ç—É–∫ –≤ –¥–≤–∏–≥–∞—Ç–µ–ª–µ</b>): üìù",
            "booking_repair_sel",
            reply_markup=Keyboards.cancel_kb()
        )
        if success:
            await callback.answer()
    except Exception as e:
        await handle_error(callback, state, bot, "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî", "–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è", e)
        await callback.answer()

@repair_booking_router.message(RepairBookingStates.AwaitingDescription, F.text)
async def process_description(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã."""
    description = message.text.strip()
    if len(description) < 5:
        await send_state_message(
            bot, str(message.chat.id), state,
            RepairBookingStates.AwaitingDescription,
            "–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω. 5 —Å–∏–º–≤–æ–ª–æ–≤). –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞: üìù",
            "booking_repair_sel",
            reply_markup=Keyboards.cancel_kb()
        )
        return
    await state.update_data(description=description, photos=[])
    success = await send_state_message(
        bot, str(message.chat.id), state,
        RepairBookingStates.AwaitingPhotos,
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—Ñ–æ—Ç–æ</b> –ø—Ä–æ–±–ª–µ–º—ã (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ'): üì∏",
        reply_markup=Keyboards.continue_without_photos_kb()
    )

@repair_booking_router.message(RepairBookingStates.AwaitingPhotos, F.photo)
async def process_photos(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π."""
    data = await state.get_data()
    photos = data.get("photos", [])
    photos.append(message.photo[-1].file_id)
    await state.update_data(photos=photos)
    success = await send_state_message(
        bot, str(message.chat.id), state,
        RepairBookingStates.AwaitingPhotos,
        f"–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ({len(photos)}). –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å': üì∏",
        reply_markup=Keyboards.continue_without_photos_kb()
    )

@repair_booking_router.callback_query(RepairBookingStates.AwaitingPhotos, F.data == "continue_without_photos")
async def continue_without_photos(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π."""
    await state.update_data(week_offset=0)
    success = await send_state_message(
        bot, str(callback.message.chat.id), state,
        RepairBookingStates.AwaitingDate,
        "–í—ã–±–µ—Ä–∏—Ç–µ <b>–¥–∞—Ç—É</b> –¥–ª—è –∑–∞–ø–∏—Å–∏: üìÖ",
        reply_markup=Keyboards.calendar_kb()
    )
    if success:
        await callback.answer()

@repair_booking_router.callback_query(RepairBookingStates.AwaitingDate, F.data.startswith("prev_week_"))
async def prev_week_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –Ω–µ–¥–µ–ª—é."""
    week_offset = int(callback.data.replace("prev_week_", ""))
    data = await state.get_data()
    selected_date = data.get("selected_date")
    await state.update_data(week_offset=week_offset)
    await callback.message.edit_reply_markup(
        reply_markup=Keyboards.calendar_kb(selected_date, week_offset)
    )
    await callback.answer()

@repair_booking_router.callback_query(RepairBookingStates.AwaitingDate, F.data.startswith("next_week_"))
async def next_week_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é."""
    week_offset = int(callback.data.replace("next_week_", ""))
    data = await state.get_data()
    selected_date = data.get("selected_date")
    await state.update_data(week_offset=week_offset)
    await callback.message.edit_reply_markup(
        reply_markup=Keyboards.calendar_kb(selected_date, week_offset)
    )
    await callback.answer()

@repair_booking_router.callback_query(RepairBookingStates.AwaitingDate, F.data == "today")
async def today_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è."""
    await state.update_data(week_offset=0)
    data = await state.get_data()
    selected_date = data.get("selected_date")
    await callback.message.edit_reply_markup(
        reply_markup=Keyboards.calendar_kb(selected_date, 0)
    )
    await callback.answer()

@repair_booking_router.callback_query(RepairBookingStates.AwaitingDate, F.data.startswith("date_"))
async def process_date_selection(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã."""
    date_str = callback.data.replace("date_", "")
    try:
        selected_date = datetime.strptime(date_str, "%Y-%m-%d")
        data = await state.get_data()
        week_offset = data.get("week_offset", 0)
        with Session() as session:
            time_slots = Keyboards.time_slots_kb(selected_date, 60, session)
            if not time_slots.inline_keyboard:
                await send_state_message(
                    bot, str(callback.message.chat.id), state,
                    RepairBookingStates.AwaitingDate,
                    "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É: üìÖ",
                    reply_markup=Keyboards.calendar_kb(selected_date, week_offset)
                )
                await callback.answer()
                return
            await state.update_data(selected_date=selected_date, time_offset=0)
            await send_state_message(
                bot, str(callback.message.chat.id), state,
                RepairBookingStates.AwaitingTime,
                "–í—ã–±–µ—Ä–∏—Ç–µ <b>–≤—Ä–µ–º—è</b> –¥–ª—è –∑–∞–ø–∏—Å–∏: ‚è∞",
                reply_markup=time_slots
            )
            await callback.answer()
    except ValueError:
        data = await state.get_data()
        week_offset = data.get("week_offset", 0)
        await send_state_message(
            bot, str(callback.message.chat.id), state,
            RepairBookingStates.AwaitingDate,
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞: üìÖ",
            reply_markup=Keyboards.calendar_kb(week_offset=week_offset)
        )
        await callback.answer()

@repair_booking_router.callback_query(RepairBookingStates.AwaitingTime, F.data.startswith("prev_slots_"))
async def prev_slots_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–ª–æ—Ç–∞–º."""
    time_offset = int(callback.data.replace("prev_slots_", ""))
    data = await state.get_data()
    selected_date = data.get("selected_date")
    await state.update_data(time_offset=time_offset)
    with Session() as session:
        await callback.message.edit_reply_markup(
            reply_markup=Keyboards.time_slots_kb(selected_date, 60, session, time_offset)
        )
    await callback.answer()

@repair_booking_router.callback_query(RepairBookingStates.AwaitingTime, F.data.startswith("next_slots_"))
async def next_slots_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–ª–æ—Ç–∞–º."""
    time_offset = int(callback.data.replace("next_slots_", ""))
    data = await state.get_data()
    selected_date = data.get("selected_date")
    await state.update_data(time_offset=time_offset)
    with Session() as session:
        await callback.message.edit_reply_markup(
            reply_markup=Keyboards.time_slots_kb(selected_date, 60, session, time_offset)
        )
    await callback.answer()

@repair_booking_router.callback_query(RepairBookingStates.AwaitingTime, F.data.startswith("time_"))
async def process_time_selection(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏."""
    time_str = callback.data.replace("time_", "")
    try:
        selected_time = datetime.strptime(time_str, "%H:%M").time()
        data = await state.get_data()
        with Session() as session:
            user = session.query(User).filter_by(telegram_id=str(callback.from_user.id)).first()
            auto = session.query(Auto).get(data["auto_id"])
            if not auto:
                await handle_error(
                    callback, state, bot,
                    "–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ. üöó",
                    f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è auto_id={data['auto_id']}",
                    Exception("–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                )
                await callback.answer()
                return
            booking = Booking(
                user_id=user.id,
                auto_id=data["auto_id"],
                service_name="–†–µ–º–æ–Ω—Ç: " + data["description"],
                date=data["selected_date"].date(),
                time=selected_time,
                status=BookingStatus.PENDING,
                price=0,  # –¶–µ–Ω–∞ –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –º–∞—Å—Ç–µ—Ä–æ–º
                created_at=datetime.utcnow()
            )
            session.add(booking)
            session.commit()
            logger.info(f"–ó–∞–ø–∏—Å—å –Ω–∞ —Ä–µ–º–æ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∞: {booking.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –º–∞—Å—Ç–µ—Ä—É
            photos = data.get("photos", [])
            if photos:
                for photo_id in photos:
                    await bot.send_photo(
                        chat_id=ADMIN_ID,
                        photo=photo_id,
                        caption=f"–§–æ—Ç–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ #{booking.id}"
                    )
            success = await notify_master(bot, booking, user, auto)
            if not success:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞ –æ –∑–∞–ø–∏—Å–∏ booking_id={booking.id}")
            asyncio.create_task(schedule_reminder(bot, booking, user, auto))
            asyncio.create_task(schedule_user_reminder(bot, booking, user, auto))
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å ‚ùå", callback_data=f"cancel_booking_{booking.id}")
            ]])
            sent_message = await send_message(
                bot, str(callback.message.chat.id), "text",
                f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–º–æ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–∞—Å—Ç–µ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. ‚è≥\n"
                f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']} üîß",
                reply_markup=keyboard
            )
            if sent_message:
                await state.update_data(last_message_id=sent_message.message_id)
            await state.clear()
            await callback.answer()
    except Exception as e:
        await handle_error(callback, state, bot, "–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî", "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç", e)
        await callback.answer()

@repair_booking_router.callback_query(F.data == "cancel")
async def cancel_action(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    sent_message = await send_message(
        bot, str(callback.message.chat.id), "text",
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. ‚ùå",
        reply_markup=Keyboards.main_menu_kb()
    )
    if sent_message:
        await state.update_data(last_message_id=sent_message.message_id)
    await state.clear()
    await callback.answer()

@repair_booking_router.callback_query(F.data.startswith("confirm_booking_"))
@master_only
async def confirm_booking(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ú–∞—Å—Ç–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å."""
    booking_id = int(callback.data.replace("confirm_booking_", ""))
    try:
        with Session() as session:
            booking, user, auto = await get_booking_context(session, booking_id, bot, callback, state)
            if not booking:
                await callback.answer()
                return
            booking.status = BookingStatus.CONFIRMED
            session.commit()
            success = await send_booking_notification(
                bot, user.telegram_id, booking, user, auto,
                "–í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ —Ä–µ–º–æ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! ‚úÖ"
            )
            if not success:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user_id={user.telegram_id} –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ booking_id={booking_id}")
            await callback.message.edit_text(
                callback.message.text + "\n<b>–°—Ç–∞—Ç—É—Å:</b> –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ ‚úÖ",
                parse_mode="HTML"
            )
            await callback.answer("–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. ‚úÖ")
    except Exception as e:
        await handle_error(callback, state, bot, "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî", f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ booking_id={booking_id}", e)
        await callback.answer()

@repair_booking_router.callback_query(F.data.startswith("reschedule_booking_"))
@master_only
async def reschedule_booking(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ú–∞—Å—Ç–µ—Ä –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è."""
    booking_id = int(callback.data.replace("reschedule_booking_", ""))
    try:
        with Session() as session:
            booking, _, _ = await get_booking_context(session, booking_id, bot, callback, state)
            if not booking:
                await callback.answer()
                return
        await state.update_data(booking_id=booking_id, master_action="reschedule")
        sent_message = await send_message(
            bot, str(callback.message.chat.id), "text",
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ <b>–≤—Ä–µ–º—è</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, <b>14:30</b>): ‚è∞"
        )
        if sent_message:
            await state.update_data(last_message_id=sent_message.message_id)
            await state.set_state(RepairBookingStates.AwaitingMasterTime)
            logger.info(f"–ú–∞—Å—Ç–µ—Ä –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏ booking_id={booking_id}")
        await callback.answer()
    except Exception as e:
        await handle_error(callback, state, bot, "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî", f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–ø–∏—Å–∏ booking_id={booking_id}", e)
        await callback.answer()

@repair_booking_router.message(RepairBookingStates.AwaitingMasterTime, F.text)
@master_only
async def process_master_time(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –º–∞—Å—Ç–µ—Ä–æ–º."""
    data = await state.get_data()
    if "booking_id" not in data or "master_action" not in data or data["master_action"] != "reschedule":
        await handle_error(
            message, state, bot,
            "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî",
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM",
            Exception("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
        )
        return
    booking_id = data.get("booking_id")
    time_str = message.text.strip()
    if not re.match(r"^(?:[01]\d|2[0-3]):[0-5]\d$", time_str):
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ '{time_str}' –¥–ª—è –∑–∞–ø–∏—Å–∏ booking_id={booking_id}")
        sent_message = await send_message(
            bot, str(message.chat.id), "text",
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, <b>14:30</b>): ‚è∞"
        )
        if sent_message:
            await state.update_data(last_message_id=sent_message.message_id)
        return
    try:
        with Session() as session:
            booking, user, auto = await get_booking_context(session, booking_id, bot, message, state)
            if not booking:
                return
            new_time = datetime.strptime(time_str, "%H:%M").time()
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏
            time_slots = Keyboards.time_slots_kb(booking.date, 60, session)
            available_times = [btn.callback_data.replace("time_", "") for row in time_slots.inline_keyboard for btn in row if btn.callback_data.startswith("time_")]
            if time_str not in available_times:
                sent_message = await send_message(
                    bot, str(message.chat.id), "text",
                    "–≠—Ç–æ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–æ. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, <b>14:30</b>): ‚è∞"
                )
                if sent_message:
                    await state.update_data(last_message_id=sent_message.message_id)
                return
            booking.proposed_time = new_time
            booking.status = BookingStatus.PENDING
            session.commit()
            success = await send_booking_notification(
                bot, user.telegram_id, booking, user, auto,
                f"–ú–∞—Å—Ç–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–∏–ª –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏:\n<b>–ù–æ–≤–æ–µ –≤—Ä–µ–º—è:</b> {new_time.strftime('%H:%M')} ‚è∞",
                Keyboards.confirm_reschedule_kb(booking_id)
            )
            if success:
                sent_message = await send_message(
                    bot, str(message.chat.id), "text",
                    "–ù–æ–≤–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. ‚è≥"
                )
                if sent_message:
                    await state.update_data(last_message_id=sent_message.message_id)
            await state.clear()
    except Exception as e:
        await handle_error(
            message, state, bot,
            "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî",
            f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ booking_id={booking_id}",
            e
        )

@repair_booking_router.callback_query(F.data.startswith("reject_booking_"))
@master_only
async def reject_booking(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ú–∞—Å—Ç–µ—Ä –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å."""
    booking_id = int(callback.data.replace("reject_booking_", ""))
    try:
        with Session() as session:
            booking, _, _ = await get_booking_context(session, booking_id, bot, callback, state)
            if not booking:
                await callback.answer()
                return
        await state.update_data(booking_id=booking_id, master_action="reject")
        sent_message = await send_message(
            bot, str(callback.message.chat.id), "text",
            "–í–≤–µ–¥–∏—Ç–µ <b>–ø—Ä–∏—á–∏–Ω—É</b> –æ—Ç–∫–∞–∑–∞: üìù"
        )
        if sent_message:
            await state.update_data(last_message_id=sent_message.message_id)
            await state.set_state(RepairBookingStates.AwaitingMasterResponse)
            logger.info(f"–ú–∞—Å—Ç–µ—Ä –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ booking_id={booking_id}")
        await callback.answer()
    except Exception as e:
        await handle_error(callback, state, bot, "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî", f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ booking_id={booking_id}", e)
        await callback.answer()

@repair_booking_router.message(RepairBookingStates.AwaitingMasterResponse, F.text)
@master_only
async def process_master_rejection(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ –º–∞—Å—Ç–µ—Ä–∞."""
    data = await state.get_data()
    if "booking_id" not in data or "master_action" not in data or data["master_action"] != "reject":
        await handle_error(
            message, state, bot,
            "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî",
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM",
            Exception("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
        )
        return
    booking_id = data.get("booking_id")
    try:
        with Session() as session:
            booking, user, auto = await get_booking_context(session, booking_id, bot, message, state)
            if not booking:
                return
            booking.status = BookingStatus.REJECTED
            booking.rejection_reason = message.text
            session.commit()
            success = await send_booking_notification(
                bot, user.telegram_id, booking, user, auto,
                f"–í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ —Ä–µ–º–æ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. ‚ùå\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {message.text} üìù"
            )
            if success:
                sent_message = await send_message(
                    bot, str(message.chat.id), "text",
                    "–û—Ç–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. ‚úÖ"
                )
                if sent_message:
                    await state.update_data(last_message_id=sent_message.message_id)
            await state.clear()
    except Exception as e:
        await handle_error(
            message, state, bot,
            "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî",
            f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫–∞–∑–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ booking_id={booking_id}",
            e
        )

@repair_booking_router.callback_query(F.data.startswith("confirm_reschedule_"))
async def process_user_confirmation(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."""
    booking_id = int(callback.data.replace("confirm_reschedule_", ""))
    try:
        with Session() as session:
            booking, user, auto = await get_booking_context(session, booking_id, bot, callback, state)
            if not booking:
                await callback.answer()
                return
            if str(callback.from_user.id) != str(booking.user.telegram_id):
                logger.warning(f"–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø: user_id={callback.from_user.id} != telegram_id={booking.user.telegram_id}")
                await callback.answer("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∑–∞–ø–∏—Å–∏. üîí")
                return
            if not booking.proposed_time:
                await handle_error(
                    callback, state, bot,
                    "–û—à–∏–±–∫–∞: –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. ‚è∞",
                    f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è booking_id={booking_id}",
                    Exception("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                )
                await callback.answer()
                return
            booking.time = booking.proposed_time
            booking.proposed_time = None
            booking.status = BookingStatus.CONFIRMED
            session.commit()
            success = await send_booking_notification(
                bot, ADMIN_ID, booking, user, auto,
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} {user.last_name} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–ø–∏—Å—å –Ω–∞ —Ä–µ–º–æ–Ω—Ç: ‚úÖ"
            )
            if not success:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ booking_id={booking_id}")
            sent_message = await send_message(
                bot, str(callback.message.chat.id), "text",
                f"–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞ —Ä–µ–º–æ–Ω—Ç: ‚úÖ\n"
                f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {booking.service_name.replace('–†–µ–º–æ–Ω—Ç: ', '')} üîß\n"
                f"<b>–î–∞—Ç–∞:</b> {booking.date.strftime('%d.%m.%Y')} üìÖ\n"
                f"<b>–í—Ä–µ–º—è:</b> {booking.time.strftime('%H:%M')} ‚è∞\n"
                f"<b>–ê–≤—Ç–æ:</b> {auto.brand}, {auto.year}, {auto.license_plate} üöó",
                reply_markup=Keyboards.main_menu_kb()
            )
            if sent_message:
                await state.update_data(last_message_id=sent_message.message_id)
            await callback.answer("–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. ‚úÖ")
            await state.clear()
    except Exception as e:
        await handle_error(
            callback, state, bot,
            "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî",
            f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ booking_id={booking_id}",
            e
        )
        await callback.answer()

@repair_booking_router.callback_query(F.data.startswith("reject_reschedule_"))
async def process_user_rejection(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."""
    booking_id = int(callback.data.replace("reject_reschedule_", ""))
    try:
        with Session() as session:
            booking, user, auto = await get_booking_context(session, booking_id, bot, callback, state)
            if not booking:
                await callback.answer()
                return
            if str(callback.from_user.id) != str(booking.user.telegram_id):
                logger.warning(f"–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø: user_id={callback.from_user.id} != telegram_id={booking.user.telegram_id}")
                await callback.answer("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∑–∞–ø–∏—Å–∏. üîí")
                return
            booking.status = BookingStatus.REJECTED
            booking.rejection_reason = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è"
            booking.proposed_time = None
            session.commit()
            success = await send_booking_notification(
                bot, ADMIN_ID, booking, user, auto,
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} {user.last_name} –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–ø–∏—Å—å –Ω–∞ —Ä–µ–º–æ–Ω—Ç:\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è üìù"
            )
            if not success:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ booking_id={booking_id}")
            sent_message = await send_message(
                bot, str(callback.message.chat.id), "text",
                f"–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏: ‚ùå\n"
                f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {booking.service_name.replace('–†–µ–º–æ–Ω—Ç: ', '')} üîß\n"
                f"<b>–î–∞—Ç–∞:</b> {booking.date.strftime('%d.%m.%Y')} üìÖ\n"
                f"<b>–ê–≤—Ç–æ:</b> {auto.brand}, {auto.year}, {auto.license_plate} üöó",
                reply_markup=Keyboards.main_menu_kb()
            )
            if sent_message:
                await state.update_data(last_message_id=sent_message.message_id)
            await callback.answer("–ó–∞–ø–∏—Å—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. ‚ùå")
            await state.clear()
    except Exception as e:
        await handle_error(
            callback, state, bot,
            "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî",
            f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ booking_id={booking_id}",
            e
        )
        await callback.answer()

@repair_booking_router.callback_query(F.data.startswith("cancel_booking_"))
async def process_booking_cancellation(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    booking_id = int(callback.data.replace("cancel_booking_", ""))
    try:
        with Session() as session:
            booking, user, auto = await get_booking_context(session, booking_id, bot, callback, state)
            if not booking:
                await callback.answer()
                return
            if str(callback.from_user.id) != str(booking.user.telegram_id):
                logger.warning(f"–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø: user_id={callback.from_user.id} != telegram_id={booking.user.telegram_id}")
                await callback.answer("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∑–∞–ø–∏—Å–∏. üîí")
                return
            booking.status = BookingStatus.CANCELLED
            booking.rejection_reason = "–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
            session.commit()
            reminder_manager.cancel(booking_id)
            success = await send_booking_notification(
                bot, ADMIN_ID, booking, user, auto,
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} {user.last_name} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å –Ω–∞ —Ä–µ–º–æ–Ω—Ç: ‚ùå"
            )
            if not success:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞ –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏ booking_id={booking_id}")
            sent_message = await send_message(
                bot, str(callback.message.chat.id), "text",
                f"–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞ —Ä–µ–º–æ–Ω—Ç: ‚ùå\n"
                f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {booking.service_name.replace('–†–µ–º–æ–Ω—Ç: ', '')} üîß\n"
                f"<b>–î–∞—Ç–∞:</b> {booking.date.strftime('%d.%m.%Y')} üìÖ\n"
                f"<b>–í—Ä–µ–º—è:</b> {booking.time.strftime('%H:%M')} ‚è∞",
                reply_markup=Keyboards.main_menu_kb()
            )
            if sent_message:
                await state.update_data(last_message_id=sent_message.message_id)
            await callback.answer("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. ‚ùå")
            await state.clear()
    except Exception as e:
        await handle_error(
            callback, state, bot,
            "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî",
            f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ booking_id={booking_id}",
            e
        )
        await callback.answer()