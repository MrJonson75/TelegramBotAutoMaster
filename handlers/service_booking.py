from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import MESSAGES, SERVICES, get_photo_path, ADMIN_ID
from keyboards.main_kb import Keyboards
from utils import setup_logger, UserInput, AutoInput
from database import User, Auto, Booking, BookingStatus, Session, init_db
from datetime import datetime
from pydantic import ValidationError
import asyncio
from .service_utils import (
    get_progress_bar, process_user_input, send_message, handle_error,
    master_only, get_booking_context, send_booking_notification, set_user_state,
    notify_master, schedule_reminder, schedule_user_reminder, reminder_manager
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
init_db()

service_booking_router = Router()
logger = setup_logger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class BookingStates(StatesGroup):
    AwaitingAutoSelection = State()
    AwaitingService = State()
    AwaitingFirstName = State()
    AwaitingLastName = State()
    AwaitingPhone = State()
    AwaitingAutoBrand = State()
    AwaitingAutoYear = State()
    AwaitingAutoVin = State()
    AwaitingAutoLicensePlate = State()
    AwaitingAddAnotherAuto = State()
    AwaitingDate = State()
    AwaitingTime = State()
    AwaitingMasterResponse = State()
    AwaitingMasterTime = State()
    AwaitingUserConfirmation = State()

# –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
PROGRESS_STEPS = {
    str(BookingStates.AwaitingFirstName): 1,
    str(BookingStates.AwaitingLastName): 2,
    str(BookingStates.AwaitingPhone): 3,
    str(BookingStates.AwaitingAutoBrand): 4,
    str(BookingStates.AwaitingAutoYear): 5,
    str(BookingStates.AwaitingAutoVin): 6,
    str(BookingStates.AwaitingAutoLicensePlate): 7,
    str(BookingStates.AwaitingAddAnotherAuto): 8,
    str(BookingStates.AwaitingAutoSelection): 9,
    str(BookingStates.AwaitingService): 10,
    str(BookingStates.AwaitingDate): 11,
    str(BookingStates.AwaitingTime): 12
}

# –õ–æ–≥–∏—Ä—É–µ–º –∫–ª—é—á–∏ PROGRESS_STEPS –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
logger.debug(f"PROGRESS_STEPS keys: {list(PROGRESS_STEPS.keys())}")

@service_booking_router.message(F.text == "–ó–∞–ø–∏—Å—å –Ω–∞ –¢–û")
async def start_booking(message: Message, state: FSMContext, bot: Bot):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –Ω–∞ –¢–û."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –∑–∞–ø–∏—Å—å")
    try:
        logger.debug(f"–ö–ª–∞—Å—Å Session: {Session}, –¥–≤–∏–∂–æ–∫: {Session.kw['bind']}")
        with Session() as session:
            user = session.query(User).filter_by(telegram_id=str(message.from_user.id)).first()
            if user:
                autos = session.query(Auto).filter_by(user_id=user.id).all()
                if autos:
                    logger.debug(f"–ü–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º get_progress_bar: state=BookingStates.AwaitingAutoSelection")
                    sent_message = await send_message(
                        bot, str(message.chat.id), "photo",
                        (await get_progress_bar(BookingStates.AwaitingAutoSelection, PROGRESS_STEPS, 12, "emoji")).format(
                            message="–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –¢–û: üöó"
                        ),
                        photo_path=get_photo_path("booking"),
                        reply_markup=Keyboards.auto_selection_kb(autos)
                    )
                    if sent_message:
                        await state.update_data(last_message_id=sent_message.message_id)
                        await state.set_state(BookingStates.AwaitingAutoSelection)
                        logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: BookingStates.AwaitingAutoSelection, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM: {await state.get_state()}")
                    else:
                        await handle_error(
                            message, state, bot,
                            "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî",
                            "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—ã–±–æ—Ä–µ –∞–≤—Ç–æ", Exception("–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
                        )
                else:
                    logger.debug(f"–ü–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º get_progress_bar: state=BookingStates.AwaitingAutoBrand")
                    sent_message = await send_message(
                        bot, str(message.chat.id), "text",
                        (await get_progress_bar(BookingStates.AwaitingAutoBrand, PROGRESS_STEPS, 12, "emoji")).format(
                            message="–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π. –í–≤–µ–¥–∏—Ç–µ <b>–º–∞—Ä–∫—É</b> –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, <b>Toyota</b>): üöó"
                        )
                    )
                    if sent_message:
                        await state.update_data(last_message_id=sent_message.message_id)
                        await state.set_state(BookingStates.AwaitingAutoBrand)
                        logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: BookingStates.AwaitingAutoBrand, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM: {await state.get_state()}")
            else:
                logger.debug(f"–ü–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º get_progress_bar: state=BookingStates.AwaitingFirstName")
                sent_message = await send_message(
                    bot, str(message.chat.id), "text",
                    (await get_progress_bar(BookingStates.AwaitingFirstName, PROGRESS_STEPS, 12, "emoji")).format(
                        message="–î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–∏–º—è</b>:"
                    )
                )
                if sent_message:
                    await state.update_data(last_message_id=sent_message.message_id)
                    await state.set_state(BookingStates.AwaitingFirstName)
                    logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: BookingStates.AwaitingFirstName, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM: {await state.get_state()}")
    except Exception as e:
        await handle_error(message, state, bot, "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî", "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", e)

@service_booking_router.callback_query(BookingStates.AwaitingAutoSelection, F.data.startswith("auto_"))
async def process_auto_selection(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è."""
    auto_id = int(callback.data.replace("auto_", ""))
    try:
        with Session() as session:
            auto = session.query(Auto).get(auto_id)
            if not auto:
                await handle_error(
                    callback, state, bot,
                    "–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üöó", f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è auto_id={auto_id}", Exception("–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                )
                await callback.answer()
                return
            await state.update_data(auto_id=auto_id)
            logger.debug(f"–ü–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º get_progress_bar: state=BookingStates.AwaitingService")
            sent_message = await send_message(
                bot, str(callback.message.chat.id), "photo",
                (await get_progress_bar(BookingStates.AwaitingService, PROGRESS_STEPS, 12, "emoji")).format(
                    message=MESSAGES.get("booking", "–í—ã–±–µ—Ä–∏—Ç–µ <b>—É—Å–ª—É–≥—É</b> –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –¢–û: üîß")
                ),
                photo_path=get_photo_path("booking_menu"),
                reply_markup=Keyboards.services_kb()
            )
            if sent_message:
                await state.update_data(last_message_id=sent_message.message_id)
                await state.set_state(BookingStates.AwaitingService)
                logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: BookingStates.AwaitingService, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM: {await state.get_state()}")
            else:
                await handle_error(
                    callback, state, bot,
                    "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî",
                    "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—ã–±–æ—Ä–µ —É—Å–ª—É–≥–∏", Exception("–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
                )
            await callback.answer()
    except Exception as e:
        await handle_error(callback, state, bot, "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî", "–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è", e)
        await callback.answer()

@service_booking_router.callback_query(BookingStates.AwaitingAutoSelection, F.data == "add_new_auto")
async def add_new_auto(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è."""
    logger.debug(f"–ü–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º get_progress_bar: state=BookingStates.AwaitingAutoBrand")
    sent_message = await send_message(
        bot, str(callback.message.chat.id), "text",
        (await get_progress_bar(BookingStates.AwaitingAutoBrand, PROGRESS_STEPS, 12, "emoji")).format(
            message="–í–≤–µ–¥–∏—Ç–µ <b>–º–∞—Ä–∫—É</b> –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, <b>Toyota</b>): üöó"
        )
    )
    if sent_message:
        await state.update_data(last_message_id=sent_message.message_id)
        await state.set_state(BookingStates.AwaitingAutoBrand)
        logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: BookingStates.AwaitingAutoBrand, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM: {await state.get_state()}")
    await callback.answer()

@service_booking_router.message(BookingStates.AwaitingFirstName, F.text)
async def process_first_name(message: Message, state: FSMContext, bot: Bot):
    await process_user_input(
        message, state, bot,
        UserInput.validate_first_name, "first_name",
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É <b>—Ñ–∞–º–∏–ª–∏—é</b>: üë§",
        "–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–ª–∏ –¥–ª–∏–Ω–Ω–æ–µ (2‚Äì50 —Å–∏–º–≤–æ–ª–æ–≤). –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞: üòî",
        BookingStates.AwaitingLastName,
        PROGRESS_STEPS
    )

@service_booking_router.message(BookingStates.AwaitingLastName, F.text)
async def process_last_name(message: Message, state: FSMContext, bot: Bot):
    await process_user_input(
        message, state, bot,
        UserInput.validate_last_name, "last_name",
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞—á–∏–Ω–∞—è —Å <b>+7</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, <b>+79991234567</b>, 10‚Äì15 —Ü–∏—Ñ—Ä): üìû",
        "–§–∞–º–∏–ª–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è –∏–ª–∏ –¥–ª–∏–Ω–Ω–∞—è (2‚Äì50 —Å–∏–º–≤–æ–ª–æ–≤). –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞: üòî",
        BookingStates.AwaitingPhone,
        PROGRESS_STEPS
    )

@service_booking_router.message(BookingStates.AwaitingPhone, F.text)
async def process_phone(message: Message, state: FSMContext, bot: Bot):
    try:
        phone = message.text.strip()
        data = await state.get_data()
        user_input = UserInput(
            first_name=data["first_name"],
            last_name=data["last_name"],
            phone=phone
        )
        try:
            with Session() as session:
                user = User(
                    first_name=user_input.first_name,
                    last_name=user_input.last_name,
                    phone=user_input.phone,
                    telegram_id=str(message.from_user.id)
                )
                session.add(user)
                session.commit()
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            logger.debug(f"–ü–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º get_progress_bar: state=BookingStates.AwaitingAutoBrand")
            sent_message = await send_message(
                bot, str(message.chat.id), "text",
                (await get_progress_bar(BookingStates.AwaitingAutoBrand, PROGRESS_STEPS, 12, "emoji")).format(
                    message="–í–≤–µ–¥–∏—Ç–µ <b>–º–∞—Ä–∫—É</b> –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, <b>Toyota</b>): üöó"
                )
            )
            if sent_message:
                await state.update_data(last_message_id=sent_message.message_id)
                await state.set_state(BookingStates.AwaitingAutoBrand)
                logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: BookingStates.AwaitingAutoBrand, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM: {await state.get_state()}")
            else:
                await handle_error(
                    message, state, bot,
                    "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî",
                    "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –º–∞—Ä–∫–µ –∞–≤—Ç–æ", Exception("–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
                )
        except Exception as e:
            await handle_error(message, state, bot, "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî", "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", e)
    except ValidationError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}, –≤–≤–æ–¥: {phone}")
        logger.debug(f"–ü–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º get_progress_bar: state=BookingStates.AwaitingPhone")
        sent_message = await send_message(
            bot, str(message.chat.id), "text",
            (await get_progress_bar(BookingStates.AwaitingPhone, PROGRESS_STEPS, 12, "emoji")).format(
                message="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (10‚Äì15 —Ü–∏—Ñ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä, <b>+79991234567</b>). –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞: üìû"
            )
        )
        if sent_message:
            await state.update_data(last_message_id=sent_message.message_id)

@service_booking_router.message(BookingStates.AwaitingAutoBrand, F.text)
async def process_auto_brand(message: Message, state: FSMContext, bot: Bot):
    await process_user_input(
        message, state, bot,
        AutoInput.validate_brand, "brand",
        "–í–≤–µ–¥–∏—Ç–µ <b>–≥–æ–¥ –≤—ã–ø—É—Å–∫–∞</b> –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, <b>2020</b>): üìÖ",
        "–ú–∞—Ä–∫–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è –∏–ª–∏ –¥–ª–∏–Ω–Ω–∞—è (2‚Äì50 —Å–∏–º–≤–æ–ª–æ–≤). –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞: üòî",
        BookingStates.AwaitingAutoYear,
        PROGRESS_STEPS
    )

@service_booking_router.message(BookingStates.AwaitingAutoYear, F.text)
async def process_auto_year(message: Message, state: FSMContext, bot: Bot):
    try:
        year = int(message.text.strip())
        AutoInput.validate_year(year)
        await state.update_data(year=year)
        logger.debug(f"–ü–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º get_progress_bar: state=BookingStates.AwaitingAutoVin")
        sent_message = await send_message(
            bot, str(message.chat.id), "text",
            (await get_progress_bar(BookingStates.AwaitingAutoVin, PROGRESS_STEPS, 12, "emoji")).format(
                message="–í–≤–µ–¥–∏—Ç–µ <b>VIN-–Ω–æ–º–µ—Ä</b> –∞–≤—Ç–æ–º–æ–±–∏–ª—è (—Ä–æ–≤–Ω–æ 17 –±—É–∫–≤/—Ü–∏—Ñ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä, <b>JTDBT923771012345</b>): üî¢"
            )
        )
        if sent_message:
            await state.update_data(last_message_id=sent_message.message_id)
            await state.set_state(BookingStates.AwaitingAutoVin)
            logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: BookingStates.AwaitingAutoVin, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM: {await state.get_state()}")
    except (ValidationError, ValueError) as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≥–æ–¥–∞ –≤—ã–ø—É—Å–∫–∞: {e}, –≤–≤–æ–¥: {message.text}")
        logger.debug(f"–ü–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º get_progress_bar: state=BookingStates.AwaitingAutoYear")
        sent_message = await send_message(
            bot, str(message.chat.id), "text",
            (await get_progress_bar(BookingStates.AwaitingAutoYear, PROGRESS_STEPS, 12, "emoji")).format(
                message=f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ (1900‚Äì{datetime.today().year}). –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞: üìÖ"
            )
        )
        if sent_message:
            await state.update_data(last_message_id=sent_message.message_id)

@service_booking_router.message(BookingStates.AwaitingAutoVin, F.text)
async def process_auto_vin(message: Message, state: FSMContext, bot: Bot):
    await process_user_input(
        message, state, bot,
        AutoInput.validate_vin, "vin",
        "–í–≤–µ–¥–∏—Ç–µ <b>–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä</b> –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, <b>–ê123–ë–í45</b>): üöò",
        "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π VIN (17 –±—É–∫–≤/—Ü–∏—Ñ—Ä). –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞: üòî",
        BookingStates.AwaitingAutoLicensePlate,
        PROGRESS_STEPS
    )

@service_booking_router.message(BookingStates.AwaitingAutoLicensePlate, F.text)
async def process_auto_license_plate(message: Message, state: FSMContext, bot: Bot):
    try:
        license_plate = message.text.strip()
        data = await state.get_data()
        auto_input = AutoInput(
            brand=data["brand"],
            year=data["year"],
            vin=data["vin"],
            license_plate=license_plate
        )
        try:
            with Session() as session:
                user = session.query(User).filter_by(telegram_id=str(message.from_user.id)).first()
                auto = Auto(
                    user_id=user.id,
                    brand=auto_input.brand,
                    year=auto_input.year,
                    vin=auto_input.vin,
                    license_plate=auto_input.license_plate
                )
                session.add(auto)
                session.commit()
                logger.info(f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
                await state.update_data(auto_id=auto.id)
            logger.debug(f"–ü–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º get_progress_bar: state=BookingStates.AwaitingAddAnotherAuto")
            sent_message = await send_message(
                bot, str(message.chat.id), "text",
                (await get_progress_bar(BookingStates.AwaitingAddAnotherAuto, PROGRESS_STEPS, 12, "emoji")).format(
                    message="–ê–≤—Ç–æ–º–æ–±–∏–ª—å –¥–æ–±–∞–≤–ª–µ–Ω! üéâ –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
                ),
                reply_markup=Keyboards.add_another_auto_kb()
            )
            if sent_message:
                await state.update_data(last_message_id=sent_message.message_id)
                await state.set_state(BookingStates.AwaitingAddAnotherAuto)
                logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: BookingStates.AwaitingAddAnotherAuto, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM: {await state.get_state()}")
        except Exception as e:
            await handle_error(message, state, bot, "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî", "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è", e)
    except ValidationError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≥–æ—Å–Ω–æ–º–µ—Ä–∞: {e}, –≤–≤–æ–¥: {license_plate}")
        logger.debug(f"–ü–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º get_progress_bar: state=BookingStates.AwaitingAutoLicensePlate")
        sent_message = await send_message(
            bot, str(message.chat.id), "text",
            (await get_progress_bar(BookingStates.AwaitingAutoLicensePlate, PROGRESS_STEPS, 12, "emoji")).format(
                message="–ì–æ—Å–Ω–æ–º–µ—Ä —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –¥–ª–∏–Ω–Ω—ã–π (5‚Äì20 —Å–∏–º–≤–æ–ª–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, <b>–ê123–ë–í45</b>). –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞: üöò"
            )
        )
        if sent_message:
            await state.update_data(last_message_id=sent_message.message_id)

@service_booking_router.callback_query(BookingStates.AwaitingAddAnotherAuto, F.data == "add_another_auto")
async def add_another_auto(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ—â—ë –æ–¥–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è."""
    logger.debug(f"–ü–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º get_progress_bar: state=BookingStates.AwaitingAutoBrand")
    sent_message = await send_message(
        bot, str(callback.message.chat.id), "text",
        (await get_progress_bar(BookingStates.AwaitingAutoBrand, PROGRESS_STEPS, 12, "emoji")).format(
            message="–í–≤–µ–¥–∏—Ç–µ <b>–º–∞—Ä–∫—É</b> –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, <b>Toyota</b>): üöó"
        )
    )
    if sent_message:
        await state.update_data(last_message_id=sent_message.message_id)
        await state.set_state(BookingStates.AwaitingAutoBrand)
        logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: BookingStates.AwaitingAutoBrand, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM: {await state.get_state()}")
    await callback.answer()

@service_booking_router.callback_query(BookingStates.AwaitingAddAnotherAuto, F.data == "continue_booking")
async def continue_booking(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    try:
        logger.debug(f"–ü–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º get_progress_bar: state=BookingStates.AwaitingService")
        sent_message = await send_message(
            bot, str(callback.message.chat.id), "photo",
            (await get_progress_bar(BookingStates.AwaitingService, PROGRESS_STEPS, 12, "emoji")).format(
                message=MESSAGES.get("booking", "–í—ã–±–µ—Ä–∏—Ç–µ <b>—É—Å–ª—É–≥—É</b> –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –¢–û: üîß")
            ),
            photo_path=get_photo_path("booking_final"),
            reply_markup=Keyboards.services_kb()
        )
        if sent_message:
            await state.update_data(last_message_id=sent_message.message_id)
            await state.set_state(BookingStates.AwaitingService)
            logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: BookingStates.AwaitingService, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM: {await state.get_state()}")
        else:
            await handle_error(
                callback, state, bot,
                "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî",
                "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—ã–±–æ—Ä–µ —É—Å–ª—É–≥–∏", Exception("–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
            )
        await callback.answer()
    except Exception as e:
        await handle_error(callback, state, bot, "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî", "–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏", e)
        await callback.answer()

@service_booking_router.callback_query(BookingStates.AwaitingService, F.data.startswith("service_"))
async def process_service_selection(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —É—Å–ª—É–≥–∏."""
    service_name = callback.data.replace("service_", "")
    if service_name not in [s["name"] for s in SERVICES]:
        logger.debug(f"–ü–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º get_progress_bar: state=BookingStates.AwaitingService")
        sent_message = await send_message(
            bot, str(callback.message.chat.id), "text",
            (await get_progress_bar(BookingStates.AwaitingService, PROGRESS_STEPS, 12, "emoji")).format(
                message="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —É—Å–ª—É–≥–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞: üîß"
            ),
            reply_markup=Keyboards.services_kb()
        )
        if sent_message:
            await state.update_data(last_message_id=sent_message.message_id)
        await callback.answer()
        return
    service_duration = next(s["duration_minutes"] for s in SERVICES if s["name"] == service_name)
    await state.update_data(service_name=service_name, service_duration=service_duration, week_offset=0)
    logger.debug(f"–ü–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º get_progress_bar: state=BookingStates.AwaitingDate")
    sent_message = await send_message(
        bot, str(callback.message.chat.id), "text",
        (await get_progress_bar(BookingStates.AwaitingDate, PROGRESS_STEPS, 12, "emoji")).format(
            message="–í—ã–±–µ—Ä–∏—Ç–µ <b>–¥–∞—Ç—É</b> –¥–ª—è –∑–∞–ø–∏—Å–∏: üìÖ"
        ),
        reply_markup=Keyboards.calendar_kb()
    )
    if sent_message:
        await state.update_data(last_message_id=sent_message.message_id)
        await state.set_state(BookingStates.AwaitingDate)
        logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: BookingStates.AwaitingDate, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM: {await state.get_state()}")
    await callback.answer()

@service_booking_router.callback_query(BookingStates.AwaitingDate, F.data.startswith("prev_week_"))
async def prev_week_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –Ω–µ–¥–µ–ª—é."""
    week_offset = int(callback.data.replace("prev_week_", ""))
    data = await state.get_data()
    selected_date = data.get("selected_date")
    await state.update_data(week_offset=week_offset)
    await callback.message.edit_reply_markup(
        reply_markup=Keyboards.calendar_kb(selected_date, week_offset)
    )
    await callback.answer()

@service_booking_router.callback_query(BookingStates.AwaitingDate, F.data.startswith("next_week_"))
async def next_week_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é."""
    week_offset = int(callback.data.replace("next_week_", ""))
    data = await state.get_data()
    selected_date = data.get("selected_date")
    await state.update_data(week_offset=week_offset)
    await callback.message.edit_reply_markup(
        reply_markup=Keyboards.calendar_kb(selected_date, week_offset)
    )
    await callback.answer()

@service_booking_router.callback_query(BookingStates.AwaitingDate, F.data == "today")
async def today_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è."""
    await state.update_data(week_offset=0)
    data = await state.get_data()
    selected_date = data.get("selected_date")
    await callback.message.edit_reply_markup(
        reply_markup=Keyboards.calendar_kb(selected_date, 0)
    )
    await callback.answer()

@service_booking_router.callback_query(BookingStates.AwaitingDate, F.data.startswith("date_"))
async def process_date_selection(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã."""
    date_str = callback.data.replace("date_", "")
    try:
        selected_date = datetime.strptime(date_str, "%Y-%m-%d")
        data = await state.get_data()
        week_offset = data.get("week_offset", 0)
        with Session() as session:
            time_slots = Keyboards.time_slots_kb(selected_date, data["service_duration"], session)
            if not time_slots.inline_keyboard:
                logger.debug(f"–ü–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º get_progress_bar: state=BookingStates.AwaitingDate")
                sent_message = await send_message(
                    bot, str(callback.message.chat.id), "text",
                    (await get_progress_bar(BookingStates.AwaitingDate, PROGRESS_STEPS, 12, "emoji")).format(
                        message="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É: üìÖ"
                    ),
                    reply_markup=Keyboards.calendar_kb(selected_date, week_offset)
                )
                if sent_message:
                    await state.update_data(last_message_id=sent_message.message_id)
                await callback.answer()
                return
            await state.update_data(selected_date=selected_date, time_offset=0)
            logger.debug(f"–ü–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º get_progress_bar: state=BookingStates.AwaitingTime")
            sent_message = await send_message(
                bot, str(callback.message.chat.id), "text",
                (await get_progress_bar(BookingStates.AwaitingTime, PROGRESS_STEPS, 12, "emoji")).format(
                    message="–í—ã–±–µ—Ä–∏—Ç–µ <b>–≤—Ä–µ–º—è</b> –¥–ª—è –∑–∞–ø–∏—Å–∏: ‚è∞"
                ),
                reply_markup=time_slots
            )
            if sent_message:
                await state.update_data(last_message_id=sent_message.message_id)
                await state.set_state(BookingStates.AwaitingTime)
                logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: BookingStates.AwaitingTime, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM: {await state.get_state()}")
            await callback.answer()
    except ValueError:
        data = await state.get_data()
        week_offset = data.get("week_offset", 0)
        logger.debug(f"–ü–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º get_progress_bar: state=BookingStates.AwaitingDate")
        sent_message = await send_message(
            bot, str(callback.message.chat.id), "text",
            (await get_progress_bar(BookingStates.AwaitingDate, PROGRESS_STEPS, 12, "emoji")).format(
                message="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞: üìÖ"
            ),
            reply_markup=Keyboards.calendar_kb(week_offset=week_offset)
        )
        if sent_message:
            await state.update_data(last_message_id=sent_message.message_id)
        await callback.answer()

@service_booking_router.callback_query(BookingStates.AwaitingTime, F.data.startswith("prev_slots_"))
async def prev_slots_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–ª–æ—Ç–∞–º."""
    time_offset = int(callback.data.replace("prev_slots_", ""))
    data = await state.get_data()
    selected_date = data.get("selected_date")
    service_duration = data.get("service_duration")
    await state.update_data(time_offset=time_offset)
    with Session() as session:
        await callback.message.edit_reply_markup(
            reply_markup=Keyboards.time_slots_kb(selected_date, service_duration, session, time_offset)
        )
    await callback.answer()

@service_booking_router.callback_query(BookingStates.AwaitingTime, F.data.startswith("next_slots_"))
async def next_slots_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–ª–æ—Ç–∞–º."""
    time_offset = int(callback.data.replace("next_slots_", ""))
    data = await state.get_data()
    selected_date = data.get("selected_date")
    service_duration = data.get("service_duration")
    await state.update_data(time_offset=time_offset)
    with Session() as session:
        await callback.message.edit_reply_markup(
            reply_markup=Keyboards.time_slots_kb(selected_date, service_duration, session, time_offset)
        )
    await callback.answer()

@service_booking_router.callback_query(BookingStates.AwaitingTime, F.data.startswith("time_"))
async def process_time_selection(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏."""
    time_str = callback.data.replace("time_", "")
    try:
        selected_time = datetime.strptime(time_str, "%H:%M").time()
        data = await state.get_data()
        with Session() as session:
            user = session.query(User).filter_by(telegram_id=str(callback.from_user.id)).first()
            auto = session.query(Auto).get(data["auto_id"])
            if not auto:
                await handle_error(
                    callback, state, bot,
                    "–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ. üöó", f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è auto_id={data['auto_id']}", Exception("–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                )
                await callback.answer()
                return
            service_price = next(s["price"] for s in SERVICES if s["name"] == data["service_name"])
            booking = Booking(
                user_id=user.id,
                auto_id=data["auto_id"],
                service_name=data["service_name"],
                date=data["selected_date"].date(),
                time=selected_time,
                status=BookingStatus.PENDING,
                price=service_price,
                created_at=datetime.utcnow()
            )
            session.add(booking)
            session.commit()
            logger.info(f"–ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞: {booking.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
            success = await notify_master(bot, booking, user, auto)
            if not success:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞ –æ –∑–∞–ø–∏—Å–∏ booking_id={booking.id}")
            asyncio.create_task(schedule_reminder(bot, booking, user, auto))
            asyncio.create_task(schedule_user_reminder(bot, booking, user, auto))
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å ‚ùå", callback_data=f"cancel_booking_{booking.id}")]
            ])
            sent_message = await send_message(
                bot, str(callback.message.chat.id), "text",
                f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–∞—Å—Ç–µ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. ‚è≥\n"
                f"<b>–£—Å–ª—É–≥–∞:</b> {booking.service_name} ({service_price} ‚ÇΩ) üîß",
                reply_markup=keyboard
            )
            if sent_message:
                await state.update_data(last_message_id=sent_message.message_id)
            await state.clear()
            await callback.answer()
    except Exception as e:
        await handle_error(callback, state, bot, "–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî", "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏", e)
        await callback.answer()

@service_booking_router.callback_query(F.data.startswith("confirm_booking_"))
@master_only
async def confirm_booking(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ú–∞—Å—Ç–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å."""
    booking_id = int(callback.data.replace("confirm_booking_", ""))
    try:
        with Session() as session:
            booking, user, auto = await get_booking_context(session, booking_id, bot, callback, state)
            if not booking:
                await callback.answer()
                return
            booking.status = BookingStatus.CONFIRMED
            session.commit()
            success = await send_booking_notification(
                bot, user.telegram_id, booking, user, auto,
                "–í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! ‚úÖ"
            )
            if not success:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user_id={user.telegram_id} –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ booking_id={booking_id}")
            await callback.message.edit_text(
                callback.message.text + "\n<b>–°—Ç–∞—Ç—É—Å:</b> –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ ‚úÖ",
                parse_mode="HTML"
            )
            await callback.answer("–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. ‚úÖ")
    except Exception as e:
        await handle_error(callback, state, bot, "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî", f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ booking_id={booking_id}", e)
        await callback.answer()

@service_booking_router.callback_query(F.data.startswith("reschedule_booking_"))
@master_only
async def reschedule_booking(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ú–∞—Å—Ç–µ—Ä –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è."""
    booking_id = int(callback.data.replace("reschedule_booking_", ""))
    try:
        with Session() as session:
            booking, _, _ = await get_booking_context(session, booking_id, bot, callback, state)
            if not booking:
                await callback.answer()
                return
        await state.update_data(booking_id=booking_id, master_action="reschedule")
        sent_message = await send_message(
            bot, str(callback.message.chat.id), "text",
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ <b>–≤—Ä–µ–º—è</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, <b>14:30</b>): ‚è∞"
        )
        if sent_message:
            await state.update_data(last_message_id=sent_message.message_id)
            await state.set_state(BookingStates.AwaitingMasterTime)
            logger.info(f"–ú–∞—Å—Ç–µ—Ä –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏ booking_id={booking_id}")
        await callback.answer()
    except Exception as e:
        await handle_error(callback, state, bot, "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî", f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–ø–∏—Å–∏ booking_id={booking_id}", e)
        await callback.answer()

@service_booking_router.callback_query(F.data.startswith("reject_booking_"))
@master_only
async def reject_booking(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ú–∞—Å—Ç–µ—Ä –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å."""
    booking_id = int(callback.data.replace("reject_booking_", ""))
    await state.update_data(booking_id=booking_id, master_action="reject")
    sent_message = await send_message(
        bot, str(callback.message.chat.id), "text",
        "–£–∫–∞–∂–∏—Ç–µ <b>–ø—Ä–∏—á–∏–Ω—É</b> –æ—Ç–∫–∞–∑–∞: üìù"
    )
    if sent_message:
        await state.update_data(last_message_id=sent_message.message_id)
        await state.set_state(BookingStates.AwaitingMasterResponse)
        logger.info(f"–ú–∞—Å—Ç–µ—Ä –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ booking_id={booking_id}")
    await callback.answer()

@service_booking_router.message(BookingStates.AwaitingMasterTime, F.text)
@master_only
async def process_master_time(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –º–∞—Å—Ç–µ—Ä–æ–º."""
    data = await state.get_data()
    if "booking_id" not in data or "master_action" not in data or data["master_action"] != "reschedule":
        await handle_error(
            message, state, bot,
            "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî",
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM", Exception("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
        )
        return
    booking_id = data.get("booking_id")
    try:
        with Session() as session:
            booking, user, auto = await get_booking_context(session, booking_id, bot, message, state)
            if not booking:
                return
            new_time = datetime.strptime(message.text, "%H:%M").time()
            booking.proposed_time = new_time
            booking.status = BookingStatus.PENDING
            session.commit()
            success = await set_user_state(
                state.key.bot_id, user.telegram_id, state.storage,
                BookingStates.AwaitingUserConfirmation, {"booking_id": booking_id}
            )
            if not success:
                await handle_error(
                    message, state, bot,
                    "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. üòî",
                    f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è user_id={user.telegram_id}", Exception("–û—à–∏–±–∫–∞ FSM")
                )
                return
            sent_message = await send_booking_notification(
                bot, user.telegram_id, booking, user, auto,
                f"–ú–∞—Å—Ç–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–∏–ª –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏:\n<b>–ù–æ–≤–æ–µ –≤—Ä–µ–º—è:</b> {new_time.strftime('%H:%M')} ‚è∞",
                Keyboards.confirm_reschedule_kb(booking_id)
            )
            if sent_message:
                sent_message = await send_message(
                    bot, str(message.chat.id), "text",
                    "–ù–æ–≤–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. ‚è≥"
                )
                if sent_message:
                    await state.update_data(last_message_id=sent_message.message_id)
            await state.clear()
    except ValueError:
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ '{message.text}' –¥–ª—è –∑–∞–ø–∏—Å–∏ booking_id={booking_id}")
        sent_message = await send_message(
            bot, str(message.chat.id), "text",
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, <b>14:30</b>): ‚è∞"
        )
        if sent_message:
            await state.update_data(last_message_id=sent_message.message_id)
    except Exception as e:
        await handle_error(
            message, state, bot,
            "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî", f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ booking_id={booking_id}", e
        )

@service_booking_router.message(BookingStates.AwaitingMasterResponse, F.text)
@master_only
async def process_master_rejection(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ –º–∞—Å—Ç–µ—Ä–∞."""
    data = await state.get_data()
    if "booking_id" not in data or "master_action" not in data or data["master_action"] != "reject":
        await handle_error(
            message, state, bot,
            "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî",
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM", Exception("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
        )
        return
    booking_id = data.get("booking_id")
    try:
        with Session() as session:
            booking, user, auto = await get_booking_context(session, booking_id, bot, message, state)
            if not booking:
                return
            booking.status = BookingStatus.REJECTED
            booking.rejection_reason = message.text
            session.commit()
            sent_message = await send_booking_notification(
                bot, user.telegram_id, booking, user, auto,
                f"–í–∞—à–∞ –∑–∞–ø–∏—Å—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. ‚ùå\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {message.text} üìù"
            )
            if sent_message:
                sent_message = await send_message(
                    bot, str(message.chat.id), "text",
                    "–û—Ç–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. ‚úÖ"
                )
                if sent_message:
                    await state.update_data(last_message_id=sent_message.message_id)
            await state.clear()
    except Exception as e:
        await handle_error(
            message, state, bot,
            "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî", f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫–∞–∑–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ booking_id={booking_id}", e
        )

@service_booking_router.callback_query(F.data.startswith("confirm_reschedule_"))
async def process_user_confirmation(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."""
    booking_id = int(callback.data.replace("confirm_reschedule_", ""))
    try:
        with Session() as session:
            booking, user, auto = await get_booking_context(session, booking_id, bot, callback, state)
            if not booking:
                await callback.answer()
                return
            if str(callback.from_user.id) != str(booking.user.telegram_id):
                logger.warning(f"–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø: user_id={callback.from_user.id} != telegram_id={booking.user.telegram_id}")
                await callback.answer("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∑–∞–ø–∏—Å–∏. üîí")
                return
            if not booking.proposed_time:
                await handle_error(
                    callback, state, bot,
                    "–û—à–∏–±–∫–∞: –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. ‚è∞", f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è booking_id={booking_id}",
                    Exception("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                )
                await callback.answer()
                return
            booking.time = booking.proposed_time
            booking.proposed_time = None
            booking.status = BookingStatus.CONFIRMED
            session.commit()
            success = await send_booking_notification(
                bot, ADMIN_ID, booking, user, auto,
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} {user.last_name} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–ø–∏—Å—å: ‚úÖ"
            )
            if not success:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ booking_id={booking_id}")
            sent_message = await send_message(
                bot, str(callback.message.chat.id), "text",
                f"–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∑–∞–ø–∏—Å—å: ‚úÖ\n"
                f"<b>–£—Å–ª—É–≥–∞:</b> {booking.service_name} üîß\n"
                f"<b>–î–∞—Ç–∞:</b> {booking.date.strftime('%d.%m.%Y')} üìÖ\n"
                f"<b>–í—Ä–µ–º—è:</b> {booking.time.strftime('%H:%M')} ‚è∞\n"
                f"<b>–ê–≤—Ç–æ:</b> {auto.brand}, {auto.year}, {auto.license_plate} üöó",
                reply_markup=Keyboards.main_menu_kb()
            )
            if sent_message:
                await state.update_data(last_message_id=sent_message.message_id)
            await callback.answer("–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. ‚úÖ")
            await state.clear()
    except Exception as e:
        await handle_error(
            callback, state, bot,
            "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî", f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ booking_id={booking_id}", e
        )
        await callback.answer()

@service_booking_router.callback_query(F.data.startswith("reject_reschedule_"))
async def process_user_rejection(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."""
    booking_id = int(callback.data.replace("reject_reschedule_", ""))
    try:
        with Session() as session:
            booking, user, auto = await get_booking_context(session, booking_id, bot, callback, state)
            if not booking:
                await callback.answer()
                return
            if str(callback.from_user.id) != str(booking.user.telegram_id):
                logger.warning(f"–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø: user_id={callback.from_user.id} != telegram_id={booking.user.telegram_id}")
                await callback.answer("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∑–∞–ø–∏—Å–∏. üîí")
                return
            booking.status = BookingStatus.REJECTED
            booking.rejection_reason = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è"
            booking.proposed_time = None
            session.commit()
            success = await send_booking_notification(
                bot, ADMIN_ID, booking, user, auto,
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} {user.last_name} –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–ø–∏—Å—å:\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è üìù"
            )
            if not success:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ booking_id={booking_id}")
            sent_message = await send_message(
                bot, str(callback.message.chat.id), "text",
                f"–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏: ‚ùå\n"
                f"<b>–£—Å–ª—É–≥–∞:</b> {booking.service_name} üîß\n"
                f"<b>–î–∞—Ç–∞:</b> {booking.date.strftime('%d.%m.%Y')} üìÖ\n"
                f"<b>–ê–≤—Ç–æ:</b> {auto.brand}, {auto.year}, {auto.license_plate} üöó",
                reply_markup=Keyboards.main_menu_kb()
            )
            if sent_message:
                await state.update_data(last_message_id=sent_message.message_id)
            await callback.answer("–ó–∞–ø–∏—Å—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. ‚ùå")
            await state.clear()
    except Exception as e:
        await handle_error(
            callback, state, bot,
            "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî", f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ booking_id={booking_id}", e
        )
        await callback.answer()

@service_booking_router.callback_query(F.data.startswith("cancel_booking_"))
async def process_booking_cancellation(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    booking_id = int(callback.data.replace("cancel_booking_", ""))
    try:
        with Session() as session:
            booking, user, auto = await get_booking_context(session, booking_id, bot, callback, state)
            if not booking:
                await callback.answer()
                return
            if str(callback.from_user.id) != str(booking.user.telegram_id):
                logger.warning(f"–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø: user_id={callback.from_user.id} != telegram_id={booking.user.telegram_id}")
                await callback.answer("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∑–∞–ø–∏—Å–∏. üîí")
                return
            booking.status = BookingStatus.CANCELLED
            booking.rejection_reason = "–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
            session.commit()
            reminder_manager.cancel(booking_id)
            success = await send_booking_notification(
                bot, ADMIN_ID, booking, user, auto,
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} {user.last_name} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å: ‚ùå"
            )
            if not success:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞ –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏ booking_id={booking_id}")
            sent_message = await send_message(
                bot, str(callback.message.chat.id), "text",
                f"–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–∏—Å—å: ‚ùå\n"
                f"<b>–£—Å–ª—É–≥–∞:</b> {booking.service_name} üîß\n"
                f"<b>–î–∞—Ç–∞:</b> {booking.date.strftime('%d.%m.%Y')} üìÖ\n"
                f"<b>–í—Ä–µ–º—è:</b> {booking.time.strftime('%H:%M')} ‚è∞",
                reply_markup=Keyboards.main_menu_kb()
            )
            if sent_message:
                await state.update_data(last_message_id=sent_message.message_id)
            await callback.answer("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. ‚ùå")
            await state.clear()
    except Exception as e:
        await handle_error(
            callback, state, bot,
            "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî", f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ booking_id={booking_id}", e
        )
        await callback.answer()

@service_booking_router.message(F.text == "–ú–æ–∏ –∑–∞–ø–∏—Å–∏ üìú")
async def show_bookings(message: Message, state: FSMContext, bot: Bot):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        with Session() as session:
            user = session.query(User).filter_by(telegram_id=str(message.from_user.id)).first()
            if not user:
                await handle_error(
                    message, state, bot,
                    "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã '–ó–∞–ø–∏—Å—å –Ω–∞ –¢–û'. üòî",
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", Exception("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                )
                return
            bookings = session.query(Booking).filter_by(user_id=user.id).all()
            if not bookings:
                sent_message = await send_message(
                    bot, str(message.chat.id), "text",
                    "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Å –ø–æ–º–æ—â—å—é '–ó–∞–ø–∏—Å—å –Ω–∞ –¢–û'. üìù",
                    reply_markup=Keyboards.main_menu_kb()
                )
                if sent_message:
                    await state.update_data(last_message_id=sent_message.message_id)
                return
            response = "<b>–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:</b> üìú\n\n"
            for booking in bookings:
                auto = session.query(Auto).get(booking.auto_id)
                status_map = {
                    BookingStatus.PENDING: "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚è≥",
                    BookingStatus.CONFIRMED: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ ‚úÖ",
                    BookingStatus.REJECTED: "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ ‚ùå",
                    BookingStatus.CANCELLED: "–û—Ç–º–µ–Ω–µ–Ω–æ üö´"
                }
                response += (
                    f"<b>–ó–∞–ø–∏—Å—å #{booking.id}</b>\n"
                    f"<b>–£—Å–ª—É–≥–∞:</b> {booking.service_name} üîß\n"
                    f"<b>–î–∞—Ç–∞:</b> {booking.date.strftime('%d.%m.%Y')} üìÖ\n"
                    f"<b>–í—Ä–µ–º—è:</b> {booking.time.strftime('%H:%M')} ‚è∞\n"
                    f"<b>–ê–≤—Ç–æ:</b> {auto.brand}, {auto.year}, {auto.license_plate} üöó\n"
                    f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_map[booking.status]}"
                )
                if booking.rejection_reason:
                    response += f"\n<b>–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞:</b> {booking.rejection_reason} üìù"
                response += "\n\n"
            sent_message = await send_message(
                bot, str(message.chat.id), "text",
                response,
                reply_markup=Keyboards.main_menu_kb()
            )
            if sent_message:
                await state.update_data(last_message_id=sent_message.message_id)
    except Exception as e:
        await handle_error(
            message, state, bot,
            "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π", e
        )

@service_booking_router.callback_query(F.data == "cancel_booking")
async def cancel_booking(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    sent_message = await send_message(
        bot, str(callback.message.chat.id), "text",
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. ‚ùå",
        reply_markup=Keyboards.main_menu_kb()
    )
    if sent_message:
        await state.update_data(last_message_id=sent_message.message_id)
    await state.clear()
    await callback.answer()