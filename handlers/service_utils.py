from aiogram import Bot
from aiogram.types import Message, CallbackQuery, FSInputFile, InlineKeyboardMarkup, ReplyKeyboardMarkup, InputMediaPhoto
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State
from aiogram.fsm.storage.base import StorageKey
from aiogram.exceptions import TelegramForbiddenError
from config import ADMIN_ID, REMINDER_TIME_MINUTES, get_photo_path
from keyboards.main_kb import Keyboards
from utils import delete_previous_message, setup_logger
from database import User, Auto, Booking
from datetime import datetime, timedelta, timezone
from sqlalchemy.orm import Session as SQLSession
from typing import Union, Callable, Optional, Dict, Tuple
from functools import wraps
import asyncio
import os
from .states import RepairBookingStates, REPAIR_PROGRESS_STEPS

logger = setup_logger(__name__)

async def get_progress_bar(
    current_state: State,
    steps_map: Dict[str, int],
    style: str = "emoji"
) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç—Ç–∞–ø–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞."""
    state_str = str(current_state)
    current_step = steps_map.get(state_str, 1)
    total_steps = max(steps_map.values())  # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≤—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
    logger.debug(f"Generating progress bar: state={state_str}, step={current_step}, total_steps={total_steps}")
    if style == "emoji":
        filled = "‚¨õ" * current_step
        empty = "‚¨ú" * (total_steps - current_step)
        return f"–®–∞–≥ {current_step} –∏–∑ {total_steps}: {{message}} {filled}{empty}"
    elif style == "percent":
        percent = (current_step / total_steps) * 100
        return f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {percent:.0f}% {{message}}"
    else:
        return f"–®–∞–≥ {current_step}/{total_steps}: {{message}}"

async def process_user_input(
    message: Message,
    state: FSMContext,
    bot: Bot,
    validate_fn: Callable,
    field_key: str,
    success_message: str,
    error_message: str,
    next_state: State,
    steps_map: Dict[str, int],
    reply_markup: Optional[Union[InlineKeyboardMarkup, ReplyKeyboardMarkup]] = None
) -> bool:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
    from pydantic import ValidationError
    if not message.text:
        logger.warning(f"No text provided for {field_key}")
        await delete_previous_message(bot, message.chat.id, (await state.get_data()).get("last_message_id"))
        current_state = await state.get_state() or next_state
        sent_message = await send_message(
            bot, str(message.chat.id), "text",
            (await get_progress_bar(current_state, steps_map, style="emoji")).format(message=error_message),
            reply_markup=reply_markup
        )
        if sent_message:
            await state.update_data(last_message_id=sent_message.message_id)
        return False
    try:
        value = message.text.strip()
        validate_fn(value)
        await state.update_data(**{field_key: value})
        await delete_previous_message(bot, message.chat.id, (await state.get_data()).get("last_message_id"))
        sent_message = await send_message(
            bot, str(message.chat.id), "text",
            (await get_progress_bar(next_state, steps_map, style="emoji")).format(message=success_message),
            reply_markup=reply_markup
        )
        if not sent_message:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è chat_id={message.chat.id}")
            return False
        await state.update_data(last_message_id=sent_message.message_id)
        await state.set_state(next_state)
        logger.debug(f"State set to {next_state}")
        return True
    except ValidationError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è {field_key}: {e}, –≤–≤–æ–¥: {value}")
        await delete_previous_message(bot, message.chat.id, (await state.get_data()).get("last_message_id"))
        current_state = await state.get_state() or next_state
        sent_message = await send_message(
            bot, str(message.chat.id), "text",
            (await get_progress_bar(current_state, steps_map, style="emoji")).format(message=error_message),
            reply_markup=reply_markup
        )
        if sent_message:
            await state.update_data(last_message_id=sent_message.message_id)
        return False

async def send_message(
    bot: Bot,
    chat_id: str,
    message_type: str,
    content: str,
    photo_path: Optional[str] = None,
    reply_markup: Optional[Union[InlineKeyboardMarkup, ReplyKeyboardMarkup]] = None
) -> Optional[Message]:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    try:
        if message_type == "photo" and photo_path and os.path.exists(photo_path):
            sent_message = await bot.send_photo(
                chat_id=chat_id,
                photo=FSInputFile(photo_path),
                caption=content,
                reply_markup=reply_markup,
                parse_mode="HTML"
            )
        else:
            sent_message = await bot.send_message(
                chat_id=chat_id,
                text=content,
                reply_markup=reply_markup,
                parse_mode="HTML"
            )
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç chat_id={chat_id}")
        return sent_message
    except TelegramForbiddenError:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç chat_id={chat_id}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç chat_id={chat_id}: {str(e)}")
        return None

async def delete_previous_message(bot: Bot, chat_id: int, message_id: Optional[int]) -> None:
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    if message_id:
        try:
            await bot.delete_message(chat_id=chat_id, message_id=message_id)
            logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ message_id={message_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ —á–∞—Ç–∞ chat_id={chat_id}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ message_id={message_id} –≤ —á–∞—Ç–µ chat_id={chat_id}: {str(e)}")

async def handle_error(
    message_or_callback: Union[Message, CallbackQuery],
    state: FSMContext,
    bot: Bot,
    error_message: str,
    log_message: str,
    exception: Exception
) -> bool:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è—è —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—á–∏—â–∞—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
    logger.error(f"{log_message}: {str(exception)}")
    chat_id = message_or_callback.chat.id if isinstance(message_or_callback, Message) else message_or_callback.message.chat.id
    await delete_previous_message(bot, chat_id, (await state.get_data()).get("last_message_id"))
    sent_message = await send_message(
        bot, str(chat_id), "text", error_message, reply_markup=Keyboards.main_menu_kb()
    )
    if sent_message:
        await state.update_data(last_message_id=sent_message.message_id)
    await state.clear()
    return bool(sent_message)

def master_only(handler: Callable) -> Callable:
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –º–∞—Å—Ç–µ—Ä."""
    @wraps(handler)
    async def wrapper(callback_or_message: Union[CallbackQuery, Message], *args, **kwargs):
        user_id = callback_or_message.from_user.id
        if str(user_id) != ADMIN_ID:
            logger.debug(f"–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º user_id={user_id}")
            if isinstance(callback_or_message, CallbackQuery):
                await callback_or_message.answer("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞. üîí")
            return
        return await handler(callback_or_message, *args, **kwargs)
    return wrapper

async def get_booking_context(
    session: SQLSession,
    booking_id: int,
    bot: Bot,
    message_or_callback: Union[Message, CallbackQuery],
    state: FSMContext
) -> Tuple[Optional[Booking], Optional[User], Optional[Auto]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø–∏—Å–∏, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –ø–æ booking_id."""
    booking = session.query(Booking).get(booking_id)
    if not booking:
        await handle_error(
            message_or_callback, state, bot,
            "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. üìù", f"–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è booking_id={booking_id}", Exception("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        )
        return None, None, None
    user = session.query(User).get(booking.user_id)
    if not user:
        await handle_error(
            message_or_callback, state, bot,
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. üë§", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è booking_id={booking_id}", Exception("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        )
        return None, None, None
    auto = session.query(Auto).get(booking.auto_id)
    if not auto:
        await handle_error(
            message_or_callback, state, bot,
            "–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. üöó", f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è booking_id={booking_id}", Exception("–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        )
        return None, None, None
    return booking, user, auto

async def send_booking_notification(
    bot: Bot,
    chat_id: str,
    booking: Booking,
    user: User,
    auto: Auto,
    message_text: str,
    reply_markup: Optional[Union[InlineKeyboardMarkup, ReplyKeyboardMarkup]] = None,
    photos: Optional[list] = None
) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏, –≤–∫–ª—é—á–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å."""
    message = (
        f"{message_text}\n"
        f"<b>–£—Å–ª—É–≥–∞:</b> {booking.service_name} üîß\n"
        f"<b>–î–∞—Ç–∞:</b> {booking.date.strftime('%d.%m.%Y')} üìÖ\n"
        f"<b>–í—Ä–µ–º—è:</b> {booking.time.strftime('%H:%M')} ‚è∞\n"
        f"<b>–ê–≤—Ç–æ:</b> {auto.brand}, {auto.year}, {auto.license_plate} üöó"
    )
    if booking.description:
        message += f"\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {booking.description} üìù"
    try:
        if photos:
            media = [InputMediaPhoto(media=photo_id) for photo_id in photos]
            await bot.send_media_group(chat_id=chat_id, media=media)
        sent_message = await send_message(bot, chat_id, "text", message, reply_markup=reply_markup)
        return bool(sent_message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç chat_id={chat_id}: {str(e)}")
        return False

async def set_user_state(
    bot_id: int,
    user_telegram_id: str,
    storage,
    state: State,
    data: dict
) -> bool:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        user_state = FSMContext(
            storage=storage,
            key=StorageKey(
                bot_id=bot_id,
                chat_id=int(user_telegram_id),
                user_id=int(user_telegram_id)
            )
        )
        await user_state.update_data(**data)
        await user_state.set_state(state)
        logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {state} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user_id={user_telegram_id}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è user_id={user_telegram_id}: {str(e)}")
        return False

async def notify_master(bot: Bot, booking: Booking, user: User, auto: Auto, photos: Optional[list] = None) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏."""
    from aiogram.types import InlineKeyboardButton
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data=f"confirm_booking_{booking.id}")],
        [InlineKeyboardButton(text="–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è ‚è∞", callback_data=f"reschedule_booking_{booking.id}")],
        [InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å ‚ùå", callback_data=f"reject_booking_{booking.id}")]
    ])
    try:
        success = await send_booking_notification(
            bot, ADMIN_ID, booking, user, auto,
            f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–º–æ–Ω—Ç:\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.first_name} {user.last_name} üë§\n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user.phone} üìû",
            reply_markup=keyboard,
            photos=photos
        )
        if not success:
            logger.warning(f"Failed to notify master for booking_id={booking.id}: Notification sending failed")
        return success
    except Exception as e:
        logger.error(f"Failed to notify master for booking_id={booking.id}: {str(e)}")
        return False

async def check_user_and_autos(
    session: SQLSession,
    user_id: str,
    bot: Bot,
    message_or_callback: Union[Message, CallbackQuery],
    state: FSMContext,
    photo_key: str = None
) -> Tuple[Optional[User], list[Auto]]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π."""
    user = session.query(User).filter_by(telegram_id=user_id).first()
    chat_id = message_or_callback.chat.id if isinstance(message_or_callback, Message) else message_or_callback.message.chat.id
    if not user:
        await delete_previous_message(bot, chat_id, (await state.get_data()).get("last_message_id"))
        sent_message = await send_message(
            bot, str(chat_id), "text",
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ —Å –∑–∞–ø–∏—Å–∏ –Ω–∞ –¢–û. üë§",
            reply_markup=Keyboards.main_menu_kb()
        )
        if sent_message:
            await state.update_data(last_message_id=sent_message.message_id)
        await state.clear()
        return None, []
    autos = session.query(Auto).filter_by(user_id=user.id).all()
    if not autos:
        response = "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π. –í–≤–µ–¥–∏—Ç–µ <b>–º–∞—Ä–∫—É</b> –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, <b>Toyota</b>): üöó"
        await delete_previous_message(bot, chat_id, (await state.get_data()).get("last_message_id"))
        sent_message = await send_message(
            bot, str(chat_id), "photo" if photo_key else "text",
            (await get_progress_bar(RepairBookingStates.AwaitingAutoBrand, REPAIR_PROGRESS_STEPS, style="emoji")).format(message=response),
            photo_path=get_photo_path(photo_key) if photo_key else None,
            reply_markup=Keyboards.cancel_kb()
        )
        if sent_message:
            await state.update_data(last_message_id=sent_message.message_id)
        await state.set_state(RepairBookingStates.AwaitingAutoBrand)
        return user, []
    return user, autos

class ReminderManager:
    def __init__(self):
        self.tasks: Dict[int, asyncio.Task] = {}

    async def schedule_reminder(self, bot: Bot, booking: Booking, user: User, auto: Auto, is_user: bool = False, delay_minutes: int = REMINDER_TIME_MINUTES) -> None:
        """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ."""
        try:
            booking_datetime = datetime.combine(booking.date, booking.time, tzinfo=timezone.utc)
            reminder_time = booking_datetime - timedelta(minutes=delay_minutes)
            now = datetime.now(timezone.utc)
            if reminder_time > now:
                delay = (reminder_time - now).total_seconds()
                await asyncio.sleep(delay)
                target_id = user.telegram_id if is_user else ADMIN_ID
                message = (
                    f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ß–µ—Ä–µ–∑ {delay_minutes} –º–∏–Ω—É—Ç –≤–∞—à–∞ –∑–∞–ø–∏—Å—å:\n<b>–£—Å–ª—É–≥–∞:</b> {booking.service_name} üîß"
                    if is_user else
                    f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ß–µ—Ä–µ–∑ {delay_minutes} –º–∏–Ω—É—Ç –∑–∞–ø–∏—Å—å:\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.first_name} {user.last_name} üë§"
                )
                success = await send_booking_notification(bot, target_id, booking, user, auto, message)
                if success:
                    logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ booking_id={booking.id} –≤ —á–∞—Ç {target_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ booking_id={booking.id}: {str(e)}")
        finally:
            self.tasks.pop(booking.id, None)

    def schedule(self, bot: Bot, booking: Booking, user: User, auto: Auto, is_user: bool = False, delay_minutes: int = REMINDER_TIME_MINUTES) -> None:
        """–°–æ–∑–¥–∞—ë—Ç –∑–∞–¥–∞—á—É –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
        task = asyncio.create_task(self.schedule_reminder(bot, booking, user, auto, is_user, delay_minutes))
        self.tasks[booking.id] = task

    def cancel(self, booking_id: int) -> None:
        """–û—Ç–º–µ–Ω—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ."""
        task = self.tasks.pop(booking_id, None)
        if task:
            task.cancel()
            logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ booking_id={booking_id} –æ—Ç–º–µ–Ω–µ–Ω–æ")

reminder_manager = ReminderManager()

async def schedule_reminder(bot: Bot, booking: Booking, user: User, auto: Auto, delay_minutes: int = REMINDER_TIME_MINUTES) -> None:
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É."""
    reminder_manager.schedule(bot, booking, user, auto, is_user=False, delay_minutes=delay_minutes)

async def schedule_user_reminder(bot: Bot, booking: Booking, user: User, auto: Auto, delay_minutes: int = REMINDER_TIME_MINUTES) -> None:
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    reminder_manager.schedule(bot, booking, user, auto, is_user=True, delay_minutes=delay_minutes)