from typing import Tuple, Optional, List
from aiogram import Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.fsm.context import FSMContext
from sqlalchemy.orm import Session
from database import User, Auto, Booking, BookingStatus
from config import ADMIN_ID, MESSAGES, REMINDER_TIME_MINUTES
from keyboards.main_kb import Keyboards
from utils import setup_logger
from datetime import datetime, time, timedelta
import asyncio
import hashlib
import json
import os

logger = setup_logger(__name__)

async def send_message(bot: Bot, chat_id: str, message_type: str, message: str = None, **kwargs) -> Optional[Message]:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        if message_type == "text":
            return await bot.send_message(chat_id=chat_id, text=message, parse_mode="HTML", **kwargs)
        elif message_type == "photo":
            photo = kwargs.pop("photo", None)
            if not photo:
                logger.error("–ü–∞—Ä–∞–º–µ—Ç—Ä 'photo' –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ")
                return None
            # –ï—Å–ª–∏ photo ‚Äî —Å—Ç—Ä–æ–∫–∞ –∏ —ç—Ç–æ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ FSInputFile
            if isinstance(photo, str) and os.path.isfile(photo):
                photo = FSInputFile(path=photo)
            return await bot.send_photo(chat_id=chat_id, photo=photo, caption=message, parse_mode="HTML", **kwargs)
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message_type}")
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {str(e)}")
        return None

async def handle_error(
    source: Message | CallbackQuery,
    state: FSMContext,
    bot: Bot,
    user_message: str,
    log_message: str,
    exception: Exception
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    logger.error(f"{log_message}: {str(exception)}")
    chat_id = str(source.chat.id) if isinstance(source, Message) else str(source.message.chat.id)
    sent_message = await send_message(bot, chat_id, "text", user_message, reply_markup=Keyboards.main_menu_kb())
    if sent_message:
        await state.update_data(last_message_id=sent_message.message_id)
    await state.clear()

async def get_progress_bar(
    current_state: str,
    progress_steps: dict,
    style: str = "emoji"
) -> str:
    """–°–æ–∑–¥–∞—ë—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä."""
    try:
        current_step = progress_steps.get(str(current_state), 1)
        total_steps = max(progress_steps.values())
        if style == "emoji":
            filled = "üü¢" * current_step
            empty = "‚ö™" * (total_steps - current_step)
            return f"{filled}{empty} {{message}}"
        return "{message}"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞: {str(e)}")
        return "{message}"

async def check_user_and_autos(
    session: Session,
    user_id: str,
    bot: Bot,
    source: Message | CallbackQuery,
    state: FSMContext,
    context: str = "booking"
) -> Tuple[Optional[User], List[Auto]]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –µ—Å—Ç—å –ª–∏ —É –Ω–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏."""
    try:
        user = session.query(User).filter_by(telegram_id=user_id).first()
        if not user:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ {context}")
            chat_id = str(source.chat.id) if isinstance(source, Message) else str(source.message.chat.id)
            sent_message = await send_message(
                bot, chat_id, "text",
                "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b> –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. üë§",
                reply_markup=Keyboards.main_menu_kb()
            )
            if sent_message:
                await state.update_data(last_message_id=sent_message.message_id)
            await state.clear()
            return None, []
        autos = session.query(Auto).filter_by(user_id=user.id).all()
        return user, autos
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ {context}: {str(e)}")
        await handle_error(source, state, bot, "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî", f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {context}", e)
        return None, []

async def check_user_registered(
    session: Session,
    user_id: str,
    bot: Bot,
    source: Message | CallbackQuery,
    state: FSMContext,
    context: str = "action"
) -> Optional[User]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."""
    try:
        user = session.query(User).filter_by(telegram_id=user_id).first()
        if not user:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ {context}")
            chat_id = str(source.chat.id) if isinstance(source, Message) else str(source.message.chat.id)
            sent_message = await send_message(
                bot, chat_id, "text",
                "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b> –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. üë§",
                reply_markup=Keyboards.main_menu_kb()
            )
            if sent_message:
                await state.update_data(last_message_id=sent_message.message_id)
            await state.clear()
            return None
        return user
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ {context}: {str(e)}")
        await handle_error(source, state, bot, "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî", f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {context}", e)
        return None

def master_only(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä: –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞."""
    async def wrapper(callback: CallbackQuery, state: FSMContext, bot: Bot):
        if str(callback.from_user.id) != ADMIN_ID:
            logger.warning(f"–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø: user_id={callback.from_user.id}")
            await callback.answer("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞. üîí")
            return
        return await func(callback, state, bot)
    return wrapper

async def get_booking_context(
    session: Session,
    booking_id: int,
    bot: Bot,
    source: Message | CallbackQuery,
    state: FSMContext
) -> Tuple[Optional[Booking], Optional[User], Optional[Auto]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    try:
        booking = session.query(Booking).get(booking_id)
        if not booking:
            logger.warning(f"–ó–∞–ø–∏—Å—å booking_id={booking_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await handle_error(
                source, state, bot,
                "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. üìù", f"–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è booking_id={booking_id}", Exception("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            )
            return None, None, None
        user = session.query(User).get(booking.user_id)
        auto = session.query(Auto).get(booking.auto_id)
        return booking, user, auto
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∑–∞–ø–∏—Å–∏ booking_id={booking_id}: {str(e)}")
        await handle_error(source, state, bot, "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî", f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∑–∞–ø–∏—Å–∏ booking_id={booking_id}", e)
        return None, None, None

async def send_booking_notification(
    bot: Bot,
    chat_id: str,
    booking: Booking,
    user: User,
    auto: Auto,
    message: str,
    reply_markup: InlineKeyboardMarkup = None
) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏."""
    try:
        if booking.status == BookingStatus.REJECTED:
            text = (
                f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{booking.id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n"
                f"<b>–£—Å–ª—É–≥–∞:</b> {booking.service_name}\n"
                f"<b>–ê–≤—Ç–æ:</b> {auto.brand} {auto.license_plate}\n"
                f"<b>–î–∞—Ç–∞:</b> {booking.date.strftime('%d.%m.%Y')}\n"
                f"<b>–í—Ä–µ–º—è:</b> {booking.time.strftime('%H:%M')}\n"
                f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {booking.rejection_reason}"
            )
        else:
            text = (
                f"{message}\n"
                f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.first_name} {user.last_name or ''} üìã\n"
                f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user.phone or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} üìû\n"
                f"<b>–ê–≤—Ç–æ:</b> {auto.brand}, {auto.year}, {auto.license_plate} üöó\n"
                f"<b>–£—Å–ª—É–≥–∞:</b> {booking.service_name} üîß\n"
                f"<b>–î–∞—Ç–∞:</b> {booking.date.strftime('%d.%m.%Y')} üìÖ\n"
                f"<b>–í—Ä–µ–º—è:</b> {booking.time.strftime('%H:%M')} ‚è∞"
            )
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è booking_id={booking.id}, status={booking.status}, text: {text}")
        sent_message = await send_message(
            bot, chat_id, "text",
            text,
            reply_markup=reply_markup
        )
        return bool(sent_message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id} –¥–ª—è booking_id={booking.id}: {str(e)}")
        return False

async def set_user_state(
    bot_id: int,
    user_id: str,
    storage,
    state: str,
    data: dict
) -> bool:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        from aiogram.fsm.storage.memory import MemoryStorage
        if isinstance(storage, MemoryStorage):
            storage_key = f"{bot_id}:{user_id}"
            storage.storage[storage_key] = {"state": state, "data": data}
            return True
        logger.warning(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {type(storage)}")
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è user_id={user_id}: {str(e)}")
        return False

async def notify_master(bot: Bot, booking: Booking, user: User, auto: Auto) -> bool:
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –º–∞—Å—Ç–µ—Ä–∞ –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data=f"confirm_booking_{booking.id}")],
        [InlineKeyboardButton(text="–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ ‚è∞", callback_data=f"reschedule_booking_{booking.id}")],
        [InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å ‚ùå", callback_data=f"reject_booking_{booking.id}")]
    ])
    return await send_booking_notification(
        bot, ADMIN_ID, booking, user, auto,
        f"–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å #{booking.id} –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: üìù",
        reply_markup=keyboard
    )

async def schedule_reminder(bot: Bot, booking: Booking, user: User, auto: Auto):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É."""
    try:
        from .reminder_manager import reminder_manager
        if booking.status != BookingStatus.PENDING:
            return
        reminder_time = datetime.combine(booking.date, booking.time) - timedelta(minutes=REMINDER_TIME_MINUTES)
        if reminder_time <= datetime.now():
            return
        await reminder_manager.schedule(
            bot, booking.id, reminder_time,
            ADMIN_ID,
            f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–ø–∏—Å—å #{booking.id} —á–µ—Ä–µ–∑ {REMINDER_TIME_MINUTES} –º–∏–Ω—É—Ç! ‚è∞\n"
            f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.first_name} {user.last_name or ''}\n"
            f"<b>–ê–≤—Ç–æ:</b> {auto.brand}, {auto.year}, {auto.license_plate}\n"
            f"<b>–£—Å–ª—É–≥–∞:</b> {booking.service_name}\n"
            f"<b>–í—Ä–µ–º—è:</b> {booking.date.strftime('%d.%m.%Y')} {booking.time.strftime('%H:%M')}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è booking_id={booking.id}: {str(e)}")

async def schedule_user_reminder(bot: Bot, booking: Booking, user: User, auto: Auto):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        from .reminder_manager import reminder_manager
        if booking.status != BookingStatus.CONFIRMED:
            return
        reminder_time = datetime.combine(booking.date, booking.time) - timedelta(minutes=REMINDER_TIME_MINUTES)
        if reminder_time <= datetime.now():
            return
        await reminder_manager.schedule(
            bot, booking.id, reminder_time,
            user.telegram_id,
            f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤–∞—à–∞ –∑–∞–ø–∏—Å—å #{booking.id} —á–µ—Ä–µ–∑ {REMINDER_TIME_MINUTES} –º–∏–Ω—É—Ç! ‚è∞\n"
            f"<b>–ê–≤—Ç–æ:</b> {auto.brand}, {auto.year}, {auto.license_plate}\n"
            f"<b>–£—Å–ª—É–≥–∞:</b> {booking.service_name}\n"
            f"<b>–í—Ä–µ–º—è:</b> {booking.date.strftime('%d.%m.%Y')} {booking.time.strftime('%H:%M')}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è booking_id={booking.id}: {str(e)}")

async def process_user_input(
    message: Message,
    state: FSMContext,
    bot: Bot,
    validate_func,
    field_name: str,
    success_message: str,
    error_message: str,
    next_state,
    progress_steps: dict,
    reply_markup: Optional[InlineKeyboardMarkup] = None
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π."""
    from pydantic import ValidationError
    try:
        value = message.text.strip()
        validated_value = validate_func(value)
        await state.update_data(**{field_name: validated_value})
        sent_message = await send_message(
            bot, str(message.chat.id), "text",
            (await get_progress_bar(next_state, progress_steps, style="emoji")).format(message=success_message),
            reply_markup=reply_markup
        )
        if sent_message:
            await state.update_data(last_message_id=sent_message.message_id)
            await state.set_state(next_state)
    except ValidationError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ {field_name} –¥–ª—è user_id={message.from_user.id}: {str(e)}")
        sent_message = await send_message(
            bot, str(message.chat.id), "text",
            (await get_progress_bar(await state.get_state(), progress_steps, style="emoji")).format(message=error_message),
            reply_markup=reply_markup
        )
        if sent_message:
            await state.update_data(last_message_id=sent_message.message_id)
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {field_name} –¥–ª—è user_id={message.from_user.id}: {str(e)}")
        await handle_error(
            message, state, bot,
            "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî",
            f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {field_name}",
            e
        )