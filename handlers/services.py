from aiogram import Router, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message, CallbackQuery, FSInputFile
from config import SERVICES, SERVICES_PHOTO, DEFAULT_PHOTO
from keyboards import services_kb, service_actions_kb
from utils.logger import logger

serv_router = Router()



@serv_router.message(F.text == "üîß –£—Å–ª—É–≥–∏ –±–µ–∑ –∑–∞–ø–∏—Å–∏")
async def show_services(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
    try:
        await message.answer_photo(
            photo=SERVICES_PHOTO,
            caption="<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:</b>",
            reply_markup=services_kb(),
            parse_mode="HTML"
        )
    except FileNotFoundError:
        logger.error("Services image not found, using default")
        await message.answer_photo(
            photo=DEFAULT_PHOTO,
            caption="<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:</b>",
            reply_markup=services_kb(),
            parse_mode="HTML"
        )


@serv_router.callback_query(F.data.startswith("service_detail:"))
async def service_detail(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —É—Å–ª—É–≥–∏"""
    try:
        service_name = callback.data.split(":")[1]
        service = SERVICES[service_name]

        text = (
            f"<b>{service_name}</b>\n\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç: {service['price']} —Ä—É–±.\n"
            f"‚è± –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç: {service['duration']}\n"
        )

        try:
            await callback.message.edit_text(
                text,
                reply_markup=service_actions_kb(service_name),
                parse_mode="HTML"
            )
        except TelegramBadRequest:
            await callback.message.answer(
                text,
                reply_markup=service_actions_kb(service_name),
                parse_mode="HTML"
            )
    except KeyError as e:
        logger.error(f"Service not found: {e}")
        await callback.answer("–£—Å–ª—É–≥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
    finally:
        await callback.answer()


@serv_router.callback_query(F.data.startswith("service_info:"))
async def service_info(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏"""
    try:
        service_name = callback.data.split(":")[1]
        description = SERVICES[service_name]["description"]
        await callback.answer(
            f"{service_name}\n\n{description}",
            show_alert=True
        )
    except KeyError:
        await callback.answer("–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)


@serv_router.callback_query(F.data == "back_to_services")
async def back_to_services(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —É—Å–ª—É–≥"""
    try:
        await callback.message.answer_photo(
            photo=SERVICES_PHOTO,
            caption="<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:</b>",
            reply_markup=services_kb(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error showing services: {e}")
        await callback.message.answer(
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:</b>",
            reply_markup=services_kb(),
            parse_mode="HTML"
        )
    finally:
        await callback.answer()


@serv_router.callback_query(F.data.startswith("service_book:"))
async def book_service(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏"""
    service_name = callback.data.split(":")[1]

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
    logger.info(f"User {callback.from_user.id} selected service: {service_name}")

    try:
        await callback.answer(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {service_name}. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫ –∑–∞–ø–∏—Å–∏...",
            show_alert=True
        )
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∫ –º–æ–¥—É–ª—é –∑–∞–ø–∏—Å–∏
        # –ù–∞–ø—Ä–∏–º–µ—Ä: await start_booking_process(callback, service_name)
    except Exception as e:
        logger.error(f"Booking error: {e}")
        await callback.answer(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True
        )