from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from config import Config
from database import Booking, BookingStatus
from datetime import datetime, timedelta, time
from sqlalchemy.orm import Session


class Keyboards:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏ –±–æ—Ç–∞."""

    @staticmethod
    def main_menu_kb() -> ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞—ë—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
        builder = ReplyKeyboardBuilder()
        builder.button(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã/–∫–∞–∫ –ø—Ä–æ–µ—Ö–∞—Ç—å")
        builder.button(text="–ó–∞–ø–∏—Å—å –Ω–∞ –¢–û")
        builder.button(text="–ó–∞–ø–∏—Å—å –Ω–∞ —Ä–µ–º–æ–Ω—Ç")
        builder.button(text="–ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ —Ñ–æ—Ç–æ")
        builder.button(text="–ú–æ–∏ –∑–∞–ø–∏—Å–∏")
        builder.button(text="–û –º–∞—Å—Ç–µ—Ä–µ")
        builder.adjust(2)
        return builder.as_markup(resize_keyboard=True)

    @staticmethod
    def diagnostic_choice_kb() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º", callback_data="text_diagnostic")],
            [InlineKeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="start_photo_diagnostic")]
        ])

    @staticmethod
    def photo_upload_kb() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ."""
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="photos_ready")]
        ])

    @staticmethod
    def auto_selection_kb(autos: list) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è."""
        keyboard = []
        for auto in autos:
            text = f"{auto.brand} {auto.year} {auto.license_plate}"
            keyboard.append([InlineKeyboardButton(text=text, callback_data=f"auto_{auto.id}")])
        keyboard.append([InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å", callback_data="add_new_auto")])
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def services_kb() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–µ—Ä–µ—á–Ω–µ–º —É—Å–ª—É–≥."""
        keyboard = []
        for service in Config.SERVICES:
            keyboard.append([InlineKeyboardButton(text=service["name"], callback_data=f"service_{service['name']}")])
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def add_another_auto_kb() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ—â—ë –æ–¥–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è."""
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∞–≤—Ç–æ", callback_data="add_another_auto")],
            [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue_booking")]
        ])

    @staticmethod
    def calendar_kb(selected_date: datetime = None) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ (30 –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥)."""
        today = datetime.today()
        keyboard = []
        for i in range(30):
            date = today + timedelta(days=i)
            if date.strftime("%A") in Config.WORKING_HOURS["weekends"]:
                continue
            callback_data = f"date_{date.strftime('%Y-%m-%d')}"
            text = date.strftime("%d.%m.%Y (%A)")
            if selected_date and selected_date.date() == date.date():
                text = f"‚úÖ {text}"
            keyboard.append([InlineKeyboardButton(text=text, callback_data=callback_data)])
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def time_slots_kb(date: datetime, service_duration: int, session: Session) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏."""
        start_hour = int(Config.WORKING_HOURS["start"].split(":")[0])
        end_hour = int(Config.WORKING_HOURS["end"].split(":")[0])
        keyboard = []

        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        existing_bookings = session.query(Booking).filter(
            Booking.date == date.date(),
            Booking.status != BookingStatus.REJECTED
        ).all()
        booked_times = [(b.time.hour, b.time.hour + (
                    b.time.minute + Config.SERVICES[[s["name"] for s in Config.SERVICES].index(b.service_name)][
                "duration_minutes"]) // 60) for b in existing_bookings]

        current_time = time(hour=start_hour)
        while current_time.hour < end_hour:
            slot_end_hour = current_time.hour + (service_duration // 60)
            slot_end_minutes = current_time.minute + (service_duration % 60)
            if slot_end_minutes >= 60:
                slot_end_hour += 1
                slot_end_minutes -= 60
            if slot_end_hour > end_hour or (slot_end_hour == end_hour and slot_end_minutes > 0):
                break
            is_booked = False
            for start, end in booked_times:
                if current_time.hour >= start and current_time.hour < end:
                    is_booked = True
                    break
            if not is_booked:
                callback_data = f"time_{current_time.strftime('%H:%M')}"
                keyboard.append([InlineKeyboardButton(text=current_time.strftime('%H:%M'), callback_data=callback_data)])
            current_time = (datetime.combine(datetime.today(), current_time) + timedelta(minutes=30)).time()

        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def bookings_kb(bookings: list) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–ø–∏—Å–µ–π."""
        keyboard = []
        for booking in bookings:
            auto = booking.auto
            status = {
                BookingStatus.PENDING: "‚è≥ –û–∂–∏–¥–∞–µ—Ç",
                BookingStatus.CONFIRMED: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ",
                BookingStatus.REJECTED: "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
            }[booking.status]
            text = (
                f"{booking.service_name} | {booking.date.strftime('%d.%m.%Y')} {booking.time.strftime('%H:%M')} | "
                f"{auto.brand} {auto.license_plate} | {status}"
            )
            buttons = []
            if booking.status in [BookingStatus.PENDING, BookingStatus.CONFIRMED]:
                buttons.append(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_booking_{booking.id}"))
            keyboard.append([InlineKeyboardButton(text=text, callback_data=f"view_booking_{booking.id}")])
            if buttons:
                keyboard.append(buttons)
        return InlineKeyboardMarkup(inline_keyboard=keyboard)