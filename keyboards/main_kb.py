from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from config import Config
from database import Booking, BookingStatus
from datetime import datetime, timedelta, time
from sqlalchemy.orm import Session
from utils import setup_logger

logger = setup_logger(__name__)

class Keyboards:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏ –±–æ—Ç–∞."""

    @staticmethod
    def main_menu_kb() -> ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞—ë—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
        builder = ReplyKeyboardBuilder()
        builder.button(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã/–∫–∞–∫ –ø—Ä–æ–µ—Ö–∞—Ç—å")
        builder.button(text="–ó–∞–ø–∏—Å—å –Ω–∞ –¢–û")
        builder.button(text="–ó–∞–ø–∏—Å—å –Ω–∞ —Ä–µ–º–æ–Ω—Ç")
        builder.button(text="–ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ —Ñ–æ—Ç–æ")
        builder.button(text="–ú–æ–∏ –∑–∞–ø–∏—Å–∏")
        builder.button(text="–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π")
        builder.button(text="–û –º–∞—Å—Ç–µ—Ä–µ")
        builder.adjust(2)
        return builder.as_markup(resize_keyboard=True)

    @staticmethod
    def diagnostic_choice_kb() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º", callback_data="text_diagnostic")],
            [InlineKeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="start_photo_diagnostic")]
        ])

    @staticmethod
    def photo_upload_kb() -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="photos_ready")],
            [InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_photos")]
        ])

    @staticmethod
    def auto_selection_kb(autos: list) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è."""
        keyboard = []
        for auto in autos:
            text = f"{auto.brand} {auto.year} {auto.license_plate}"
            keyboard.append([InlineKeyboardButton(text=text, callback_data=f"auto_{auto.id}")])
        keyboard.append([InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å", callback_data="add_new_auto")])
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def services_kb() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–µ—Ä–µ—á–Ω–µ–º —É—Å–ª—É–≥."""
        keyboard = []
        for service in Config.SERVICES:
            text = f"{service['name']} ({service['price']} ‚ÇΩ)"
            keyboard.append([InlineKeyboardButton(text=text, callback_data=f"service_{service['name']}")])
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def add_another_auto_kb() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ—â—ë –æ–¥–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è."""
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∞–≤—Ç–æ", callback_data="add_another_auto")],
            [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue_booking")]
        ])

    @staticmethod
    def calendar_kb(selected_date: datetime = None, week_offset: int = 0) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ (7 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π, –Ω–∞ —Ä—É—Å—Å–∫–æ–º)."""
        today = datetime.today()
        start_date = today + timedelta(days=week_offset * 7)
        keyboard = []
        valid_dates = []

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        day_names = {
            "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
            "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
            "Wednesday": "–°—Ä–µ–¥–∞",
            "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
            "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
            "Saturday": "–°—É–±–±–æ—Ç–∞",
            "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
        }
        day_emojis = {
            "Monday": "üü¶",
            "Tuesday": "üü©",
            "Wednesday": "üü®",
            "Thursday": "üüß",
            "Friday": "üü™",
            "Saturday": "üî¥",
            "Sunday": "‚ö™"
        }

        # –°–æ–±–∏—Ä–∞–µ–º 7 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
        current_date = start_date
        while len(valid_dates) < 7:
            if current_date.strftime("%A") not in Config.WORKING_HOURS["weekends"]:
                valid_dates.append(current_date)
            current_date += timedelta(days=1)
            if (current_date - start_date).days > 30:
                break

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 2‚Äì3 –¥–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫–µ
        for i in range(0, len(valid_dates), 2):
            row = []
            for date in valid_dates[i:i+2]:
                day_name = day_names[date.strftime("%A")]
                emoji = day_emojis[date.strftime("%A")]
                callback_data = f"date_{date.strftime('%Y-%m-%d')}"
                text = f"{emoji} {date.strftime('%d.%m')} {day_name}"
                if selected_date and selected_date.date() == date.date():
                    text = f"‚úÖ {text}"
                row.append(InlineKeyboardButton(text=text, callback_data=callback_data))
            keyboard.append(row)

        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        if week_offset > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"prev_week_{week_offset - 1}"))
        if today <= valid_dates[-1] < today + timedelta(days=30):
            nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°", callback_data=f"next_week_{week_offset + 1}"))
        if start_date.date() != today.date():
            nav_buttons.append(InlineKeyboardButton(text="üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="today"))
        nav_buttons.append(InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="cancel_booking"))
        keyboard.append(nav_buttons)

        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def time_slots_kb(date: datetime, service_duration: int, session: Session,
                      time_offset: int = 0) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏ (—à–∞–≥ 30 –º–∏–Ω—É—Ç, –¥–æ 6 —Å–ª–æ—Ç–æ–≤)."""
        start_hour = int(Config.WORKING_HOURS["start"].split(":")[0])
        start_minute = int(Config.WORKING_HOURS["start"].split(":")[1])
        end_hour = int(Config.WORKING_HOURS["end"].split(":")[0])
        end_minute = int(Config.WORKING_HOURS["end"].split(":")[1])
        keyboard = []
        valid_slots = []

        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        existing_bookings = session.query(Booking).filter(
            Booking.date == date.date(),
            Booking.status != BookingStatus.REJECTED
        ).all()
        booked_slots = []
        for b in existing_bookings:
            start_time = b.time
            duration = Config.SERVICES[[s["name"] for s in Config.SERVICES].index(b.service_name)]["duration_minutes"] if b.service_name != "–†–µ–º–æ–Ω—Ç" else 60
            end_time = (datetime.combine(date.today(), start_time) + timedelta(minutes=duration)).time()
            booked_slots.append((start_time, end_time))

        # –°–æ–±–∏—Ä–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã —Å —à–∞–≥–æ–º 30 –º–∏–Ω—É—Ç
        current_time = datetime.combine(date.today(), time(hour=start_hour, minute=start_minute))
        end_time = datetime.combine(date.today(), time(hour=end_hour, minute=end_minute))
        while current_time < end_time:
            slot_end = current_time + timedelta(minutes=service_duration)
            if slot_end > end_time:
                break
            is_booked = False
            for booked_start, booked_end in booked_slots:
                booked_start_dt = datetime.combine(date.today(), booked_start)
                booked_end_dt = datetime.combine(date.today(), booked_end)
                if (current_time < booked_end_dt and slot_end > booked_start_dt):
                    is_booked = True
                    break
            if not is_booked:
                valid_slots.append(current_time.time())
            current_time += timedelta(minutes=30)

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 6 —Å–ª–æ—Ç–æ–≤ –∑–∞ —Ä–∞–∑
        start_index = time_offset * 6
        display_slots = valid_slots[start_index:start_index + 6]

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 2 —Å–ª–æ—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–µ
        for i in range(0, len(display_slots), 2):
            row = []
            for slot in display_slots[i:i+2]:
                callback_data = f"time_{slot.strftime('%H:%M')}"
                text = f"üïí {slot.strftime('%H:%M')} ({service_duration} –º–∏–Ω)"
                row.append(InlineKeyboardButton(text=text, callback_data=callback_data))
            keyboard.append(row)

        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        if start_index > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚è™ –†–∞–Ω–µ–µ", callback_data=f"prev_slots_{time_offset - 1}"))
        if start_index + 6 < len(valid_slots):
            nav_buttons.append(InlineKeyboardButton(text="–ü–æ–∑–∂–µ ‚è©", callback_data=f"next_slots_{time_offset + 1}"))
        nav_buttons.append(InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="cancel_booking"))
        if nav_buttons:
            keyboard.append(nav_buttons)

        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def bookings_kb(bookings: list) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–ø–∏—Å–µ–π."""
        keyboard = []
        for booking in bookings:
            auto = booking.auto
            status = {
                BookingStatus.PENDING: "‚è≥ –û–∂–∏–¥–∞–µ—Ç",
                BookingStatus.CONFIRMED: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ",
                BookingStatus.REJECTED: "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
            }[booking.status]
            text = (
                f"{booking.service_name} | {booking.date.strftime('%d.%m.%Y')} {booking.time.strftime('%H:%M')} | "
                f"{auto.brand} {auto.license_plate} | {status}"
            )
            buttons = []
            if booking.status in [BookingStatus.PENDING, BookingStatus.CONFIRMED]:
                buttons.append(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_booking_{booking.id}"))
            keyboard.append([InlineKeyboardButton(text=text, callback_data=f"view_booking_{booking.id}")])
            if buttons:
                keyboard.append(buttons)
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def confirm_reschedule_kb(booking_id: int) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
        keyboard = [
            [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_reschedule_{booking_id}")],
            [InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_reschedule_{booking_id}")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def admin_pagination_kb(page: int, total_bookings: int) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
        navigation_rows = []
        if page > 0:
            navigation_rows.append(InlineKeyboardButton(text="‚¨Ö –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"admin_page_{page-1}"))
        if total_bookings > (page + 1) * 5:
            navigation_rows.append(InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è ‚û°", callback_data=f"admin_page_{page+1}"))
        if navigation_rows:
            return InlineKeyboardMarkup(inline_keyboard=[navigation_rows])
        return None